// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: proto/sloth.proto

package api_gateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ===================================================================================================================
// ================================================== 视频流列表开始 ==================================================
// 视频流信息
type MatchLiveStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // 线路名称 预留字段，可能不存在
	UrlSource     string                 `protobuf:"bytes,2,opt,name=url_source,json=urlSource,proto3" json:"url_source,omitempty"`    // 信号源 预留字段，可能不存在
	StreamType    string                 `protobuf:"bytes,3,opt,name=stream_type,json=streamType,proto3" json:"stream_type,omitempty"` // 流类型 预留字段，可能不存在 SD,ZH_SD,EN_SD,HD,ZH_HD,EN_HD
	RtmpUrl       string                 `protobuf:"bytes,4,opt,name=rtmp_url,json=rtmpUrl,proto3" json:"rtmp_url,omitempty"`          // RTMP 格式播放地址，可能不存在
	M3U8Url       string                 `protobuf:"bytes,5,opt,name=m3u8_url,json=m3u8Url,proto3" json:"m3u8_url,omitempty"`          // M3U8 格式播放地址，可能不存在
	FlvUrl        string                 `protobuf:"bytes,6,opt,name=flv_url,json=flvUrl,proto3" json:"flv_url,omitempty"`             // FLV 格式播放地址
	Language      string                 `protobuf:"bytes,7,opt,name=language,proto3" json:"language,omitempty"`                       // 语言代码 预留字段，可能不存在
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveStream) Reset() {
	*x = MatchLiveStream{}
	mi := &file_proto_sloth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveStream) ProtoMessage() {}

func (x *MatchLiveStream) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveStream.ProtoReflect.Descriptor instead.
func (*MatchLiveStream) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{0}
}

func (x *MatchLiveStream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchLiveStream) GetUrlSource() string {
	if x != nil {
		return x.UrlSource
	}
	return ""
}

func (x *MatchLiveStream) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *MatchLiveStream) GetRtmpUrl() string {
	if x != nil {
		return x.RtmpUrl
	}
	return ""
}

func (x *MatchLiveStream) GetM3U8Url() string {
	if x != nil {
		return x.M3U8Url
	}
	return ""
}

func (x *MatchLiveStream) GetFlvUrl() string {
	if x != nil {
		return x.FlvUrl
	}
	return ""
}

func (x *MatchLiveStream) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// ===================================================================================================================
// ================================================== 比赛趋势开始 ==================================================
// 比赛趋势返回的结果结构
type MatchTrendData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// data 列表 [["上半场，趋势变化数据 - int"],["下半场，趋势变化数据 - int"]]
	Data []*MatchTrendData_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// 半场数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// 事件列表
	Incidents []*MatchTrendData_Incidents `protobuf:"bytes,3,rep,name=incidents,proto3" json:"incidents,omitempty"`
	// 半场时长
	Per           int32 `protobuf:"varint,4,opt,name=per,proto3" json:"per,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchTrendData) Reset() {
	*x = MatchTrendData{}
	mi := &file_proto_sloth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchTrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrendData) ProtoMessage() {}

func (x *MatchTrendData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrendData.ProtoReflect.Descriptor instead.
func (*MatchTrendData) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{1}
}

func (x *MatchTrendData) GetData() []*MatchTrendData_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MatchTrendData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MatchTrendData) GetIncidents() []*MatchTrendData_Incidents {
	if x != nil {
		return x.Incidents
	}
	return nil
}

func (x *MatchTrendData) GetPer() int32 {
	if x != nil {
		return x.Per
	}
	return 0
}

type TrendInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FirstHalf     []int32                `protobuf:"varint,1,rep,packed,name=first_half,json=firstHalf,proto3" json:"first_half,omitempty"`    //上半场
	SecondHalf    []int32                `protobuf:"varint,2,rep,packed,name=second_half,json=secondHalf,proto3" json:"second_half,omitempty"` //下半场
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrendInfo) Reset() {
	*x = TrendInfo{}
	mi := &file_proto_sloth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrendInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrendInfo) ProtoMessage() {}

func (x *TrendInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrendInfo.ProtoReflect.Descriptor instead.
func (*TrendInfo) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{2}
}

func (x *TrendInfo) GetFirstHalf() []int32 {
	if x != nil {
		return x.FirstHalf
	}
	return nil
}

func (x *TrendInfo) GetSecondHalf() []int32 {
	if x != nil {
		return x.SecondHalf
	}
	return nil
}

type MatchLiveData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// repeated google.protobuf.Value score = 1;
	Score         *ScoreData           `protobuf:"bytes,1,opt,name=score,proto3" json:"score,omitempty"`
	Stats         []*Stat              `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`                                                                                   // 比赛统计字段说明，可能不存在
	Tlive         []*TLive             `protobuf:"bytes,3,rep,name=tlive,proto3" json:"tlive,omitempty"`                                                                                   // 文字直播字段说明，可能不存在
	Incidents     []*Incident          `protobuf:"bytes,4,rep,name=incidents,proto3" json:"incidents,omitempty"`                                                                           // 比赛事件字段说明，可能不存在
	TeamStats     map[string]*IntArray `protobuf:"bytes,5,rep,name=teamStats,proto3" json:"teamStats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` //比赛球队半全场统计数据
	Id            int32                `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`                                                                                        // 比赛Id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveData) Reset() {
	*x = MatchLiveData{}
	mi := &file_proto_sloth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveData) ProtoMessage() {}

func (x *MatchLiveData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveData.ProtoReflect.Descriptor instead.
func (*MatchLiveData) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{3}
}

func (x *MatchLiveData) GetScore() *ScoreData {
	if x != nil {
		return x.Score
	}
	return nil
}

func (x *MatchLiveData) GetStats() []*Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *MatchLiveData) GetTlive() []*TLive {
	if x != nil {
		return x.Tlive
	}
	return nil
}

func (x *MatchLiveData) GetIncidents() []*Incident {
	if x != nil {
		return x.Incidents
	}
	return nil
}

func (x *MatchLiveData) GetTeamStats() map[string]*IntArray {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

func (x *MatchLiveData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 比分信息
type ScoreData struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	MatchId int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	State   int32                  `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	// *
	// Array[7]
	// 0:"主队比分(常规时间) - int"
	// 1:"主队半场比分 - int"
	// 2:"主队红牌 - int"
	// 3:"主队黄牌 - int"
	// 4:"主队角球，-1表示没有角球数据 - int"
	// 5:"主队加时比分(120分钟，即包括常规时间比分)，加时赛才有 - int"
	// 6:"主队点球大战比分(不包含常规时间及加时赛比分)，点球大战才有 - int"
	HomeScores []int32 `protobuf:"varint,3,rep,packed,name=home_scores,json=homeScores,proto3" json:"home_scores,omitempty"`
	// *
	// Array[7]
	// 0:"客队比分(常规时间) - int"
	// 1:"客队半场比分 - int"
	// 2:"客队红牌 - int"
	// 3:"客队黄牌 - int"
	// 4:"客队角球，-1表示没有角球数据 - int"
	// 5:"客队加时比分(120分钟，即包括常规时间比分)，加时赛才有 - int"
	// 6:"客队点球大战比分(不包含常规时间及加时赛比分)，点球大战才有 - int"
	AwayScores    []int32 `protobuf:"varint,4,rep,packed,name=away_scores,json=awayScores,proto3" json:"away_scores,omitempty"`
	StartTime     int64   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Remark        string  `protobuf:"bytes,6,opt,name=remark,proto3" json:"remark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScoreData) Reset() {
	*x = ScoreData{}
	mi := &file_proto_sloth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreData) ProtoMessage() {}

func (x *ScoreData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreData.ProtoReflect.Descriptor instead.
func (*ScoreData) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{4}
}

func (x *ScoreData) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *ScoreData) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ScoreData) GetHomeScores() []int32 {
	if x != nil {
		return x.HomeScores
	}
	return nil
}

func (x *ScoreData) GetAwayScores() []int32 {
	if x != nil {
		return x.AwayScores
	}
	return nil
}

func (x *ScoreData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ScoreData) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 统计信息
type Stat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Away          int32                  `protobuf:"varint,1,opt,name=away,proto3" json:"away,omitempty"` // 客队值
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 类型，详见状态码->技术统计
	Home          int32                  `protobuf:"varint,3,opt,name=home,proto3" json:"home,omitempty"` // 主队值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stat) Reset() {
	*x = Stat{}
	mi := &file_proto_sloth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{5}
}

func (x *Stat) GetAway() int32 {
	if x != nil {
		return x.Away
	}
	return 0
}

func (x *Stat) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Stat) GetHome() int32 {
	if x != nil {
		return x.Home
	}
	return 0
}

type IntArray struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"` // 0：主队数值 - int/float 1：客队数值 - int/float
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntArray) Reset() {
	*x = IntArray{}
	mi := &file_proto_sloth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntArray) ProtoMessage() {}

func (x *IntArray) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntArray.ProtoReflect.Descriptor instead.
func (*IntArray) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{6}
}

func (x *IntArray) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// 文字直播
type TLive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`          // 事件内容
	Main          int32                  `protobuf:"varint,2,opt,name=main,proto3" json:"main,omitempty"`         // 是否重要事件，1-是、0-否
	Position      int32                  `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"` // 事件发生方，0-中立、1-主队、2-客队
	Time          string                 `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`          // 事件时间(分钟)
	Type          int32                  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`         // 类型，详见状态码->技术统计
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TLive) Reset() {
	*x = TLive{}
	mi := &file_proto_sloth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLive) ProtoMessage() {}

func (x *TLive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLive.ProtoReflect.Descriptor instead.
func (*TLive) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{7}
}

func (x *TLive) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TLive) GetMain() int32 {
	if x != nil {
		return x.Main
	}
	return 0
}

func (x *TLive) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TLive) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *TLive) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// 比赛事件
type Incident struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Position         int32                  `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`                                             // 事件发生方，0-中立、1-主队、2-客队
	Time             int32                  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                                     // 事件时间(分钟)
	Type             int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                     // 类型，详见状态码->技术统计
	Second           int32                  `protobuf:"varint,4,opt,name=second,proto3" json:"second,omitempty"`                                                 // 时间
	InPlayerId       int32                  `protobuf:"varint,5,opt,name=in_player_id,json=inPlayerId,proto3" json:"in_player_id,omitempty"`                     // 换上球员Id，可能不存在
	InPlayerNameZh   string                 `protobuf:"bytes,6,opt,name=in_player_name_zh,json=inPlayerNameZh,proto3" json:"in_player_name_zh,omitempty"`        // 换上球员名称(中文简体)，可能不存在
	InPlayerNameZht  string                 `protobuf:"bytes,7,opt,name=in_player_name_zht,json=inPlayerNameZht,proto3" json:"in_player_name_zht,omitempty"`     // 换上球员名称(中文繁体)，可能不存在
	InPlayerNameEn   string                 `protobuf:"bytes,8,opt,name=in_player_name_en,json=inPlayerNameEn,proto3" json:"in_player_name_en,omitempty"`        // 换上球员名称(英文)，可能不存在
	OutPlayerId      int32                  `protobuf:"varint,9,opt,name=out_player_id,json=outPlayerId,proto3" json:"out_player_id,omitempty"`                  // 换下球员Id，可能不存在
	OutPlayerNameZh  string                 `protobuf:"bytes,10,opt,name=out_player_name_zh,json=outPlayerNameZh,proto3" json:"out_player_name_zh,omitempty"`    // 换下球员名称(中文简体)，可能不存在
	OutPlayerNameZht string                 `protobuf:"bytes,11,opt,name=out_player_name_zht,json=outPlayerNameZht,proto3" json:"out_player_name_zht,omitempty"` // 换下球员名称(中文繁体)，可能不存在
	OutPlayerNameEn  string                 `protobuf:"bytes,12,opt,name=out_player_name_en,json=outPlayerNameEn,proto3" json:"out_player_name_en,omitempty"`    // 换下球员名称(英文)，可能不存在
	ReasonType       int32                  `protobuf:"varint,13,opt,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"`                      // 红黄牌、换人事件原因，详见状态码->事件原因（红黄牌、换人事件存在）
	PlayerId         int32                  `protobuf:"varint,14,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`                            // 事件相关球员id，可能不存在
	PlayerNameZh     string                 `protobuf:"bytes,15,opt,name=player_name_zh,json=playerNameZh,proto3" json:"player_name_zh,omitempty"`               // 事件相关球员名称(中文简体)，可能不存在
	PlayerNameZht    string                 `protobuf:"bytes,16,opt,name=player_name_zht,json=playerNameZht,proto3" json:"player_name_zht,omitempty"`            // 事件相关球员名称(中文繁体)，可能不存在
	PlayerNameEn     string                 `protobuf:"bytes,17,opt,name=player_name_en,json=playerNameEn,proto3" json:"player_name_en,omitempty"`               // 事件相关球员名称(英文)，可能不存在
	VarReason        int32                  `protobuf:"varint,18,opt,name=var_reason,json=varReason,proto3" json:"var_reason,omitempty"`                         // VAR原因（VAR事件存在）1-进球判定,2-进球未判定,3-点球判定,4-点球未判定,5-红牌判定,6-出牌处罚判定,7-错认身份,0-其他
	VarResult        int32                  `protobuf:"varint,19,opt,name=var_result,json=varResult,proto3" json:"var_result,omitempty"`                         // VAR结果（VAR事件存在）1-进球有效,2-进球无效,3-点球有效,4-点球取消,5-红牌有效,6-红牌取消,7-出牌处罚核实,8-出牌处罚更改,9-维持原判,10-判罚更改,0-未知
	HomeScore        int32                  `protobuf:"varint,20,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`                         // 主队比分（进球、未进球 事件存在）
	AwayScore        int32                  `protobuf:"varint,21,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`                         // 客队比分（进球、未进球 事件存在）
	Assist1Id        int32                  `protobuf:"varint,22,opt,name=assist1_id,json=assist1Id,proto3" json:"assist1_id,omitempty"`                         // 助攻球员一Id，可能不存在
	Assist1NameZh    string                 `protobuf:"bytes,23,opt,name=assist1_name_zh,json=assist1NameZh,proto3" json:"assist1_name_zh,omitempty"`            // 助攻球员一名称(中文简体)，可能不存在
	Assist1NameZht   string                 `protobuf:"bytes,24,opt,name=assist1_name_zht,json=assist1NameZht,proto3" json:"assist1_name_zht,omitempty"`         // 助攻球员一名称(中文繁体)，可能不存在
	Assist1NameEn    string                 `protobuf:"bytes,25,opt,name=assist1_name_en,json=assist1NameEn,proto3" json:"assist1_name_en,omitempty"`            // 助攻球员一名称(英文)，可能不存在
	Assist2Id        int32                  `protobuf:"varint,26,opt,name=assist2_id,json=assist2Id,proto3" json:"assist2_id,omitempty"`                         // 助攻球员二Id，可能不存在
	Assist2NameZh    string                 `protobuf:"bytes,27,opt,name=assist2_name_zh,json=assist2NameZh,proto3" json:"assist2_name_zh,omitempty"`            // 助攻球员二名称(中文简体)，可能不存在
	Assist2NameZht   string                 `protobuf:"bytes,28,opt,name=assist2_name_zht,json=assist2NameZht,proto3" json:"assist2_name_zht,omitempty"`         // 助攻球员二名称(中文繁体)，可能不存在
	Assist2NameEn    string                 `protobuf:"bytes,29,opt,name=assist2_name_en,json=assist2NameEn,proto3" json:"assist2_name_en,omitempty"`            // 助攻球员二名称(英文)，可能不存在
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Incident) Reset() {
	*x = Incident{}
	mi := &file_proto_sloth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Incident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Incident) ProtoMessage() {}

func (x *Incident) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Incident.ProtoReflect.Descriptor instead.
func (*Incident) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{8}
}

func (x *Incident) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Incident) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Incident) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Incident) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *Incident) GetInPlayerId() int32 {
	if x != nil {
		return x.InPlayerId
	}
	return 0
}

func (x *Incident) GetInPlayerNameZh() string {
	if x != nil {
		return x.InPlayerNameZh
	}
	return ""
}

func (x *Incident) GetInPlayerNameZht() string {
	if x != nil {
		return x.InPlayerNameZht
	}
	return ""
}

func (x *Incident) GetInPlayerNameEn() string {
	if x != nil {
		return x.InPlayerNameEn
	}
	return ""
}

func (x *Incident) GetOutPlayerId() int32 {
	if x != nil {
		return x.OutPlayerId
	}
	return 0
}

func (x *Incident) GetOutPlayerNameZh() string {
	if x != nil {
		return x.OutPlayerNameZh
	}
	return ""
}

func (x *Incident) GetOutPlayerNameZht() string {
	if x != nil {
		return x.OutPlayerNameZht
	}
	return ""
}

func (x *Incident) GetOutPlayerNameEn() string {
	if x != nil {
		return x.OutPlayerNameEn
	}
	return ""
}

func (x *Incident) GetReasonType() int32 {
	if x != nil {
		return x.ReasonType
	}
	return 0
}

func (x *Incident) GetPlayerId() int32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Incident) GetPlayerNameZh() string {
	if x != nil {
		return x.PlayerNameZh
	}
	return ""
}

func (x *Incident) GetPlayerNameZht() string {
	if x != nil {
		return x.PlayerNameZht
	}
	return ""
}

func (x *Incident) GetPlayerNameEn() string {
	if x != nil {
		return x.PlayerNameEn
	}
	return ""
}

func (x *Incident) GetVarReason() int32 {
	if x != nil {
		return x.VarReason
	}
	return 0
}

func (x *Incident) GetVarResult() int32 {
	if x != nil {
		return x.VarResult
	}
	return 0
}

func (x *Incident) GetHomeScore() int32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *Incident) GetAwayScore() int32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *Incident) GetAssist1Id() int32 {
	if x != nil {
		return x.Assist1Id
	}
	return 0
}

func (x *Incident) GetAssist1NameZh() string {
	if x != nil {
		return x.Assist1NameZh
	}
	return ""
}

func (x *Incident) GetAssist1NameZht() string {
	if x != nil {
		return x.Assist1NameZht
	}
	return ""
}

func (x *Incident) GetAssist1NameEn() string {
	if x != nil {
		return x.Assist1NameEn
	}
	return ""
}

func (x *Incident) GetAssist2Id() int32 {
	if x != nil {
		return x.Assist2Id
	}
	return 0
}

func (x *Incident) GetAssist2NameZh() string {
	if x != nil {
		return x.Assist2NameZh
	}
	return ""
}

func (x *Incident) GetAssist2NameZht() string {
	if x != nil {
		return x.Assist2NameZht
	}
	return ""
}

func (x *Incident) GetAssist2NameEn() string {
	if x != nil {
		return x.Assist2NameEn
	}
	return ""
}

// =============================================================================================================
// ================================================== 阵容开始 ==================================================
// 事件信息
type PlayerIncident struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                                // 事件类型（参考技术类型）
	Time          string                 `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`                                 // 事件发生时间（含加时时间，如 'A+B'）
	Belong        int32                  `protobuf:"varint,3,opt,name=belong,proto3" json:"belong,omitempty"`                            // 发生方，0-中立、1-主队、2-客队
	HomeScore     int32                  `protobuf:"varint,4,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`     // 主队比分
	AwayScore     int32                  `protobuf:"varint,5,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`     // 客队比分
	Player        *PlayerInfo            `protobuf:"bytes,6,opt,name=player,proto3" json:"player,omitempty"`                             // 球员信息
	Assist1       *PlayerInfo            `protobuf:"bytes,7,opt,name=assist1,proto3" json:"assist1,omitempty"`                           // 助攻球员1
	Assist2       *PlayerInfo            `protobuf:"bytes,8,opt,name=assist2,proto3" json:"assist2,omitempty"`                           // 助攻球员2
	InPlayer      *PlayerInfo            `protobuf:"bytes,9,opt,name=in_player,json=inPlayer,proto3" json:"in_player,omitempty"`         // 换上球员
	OutPlayer     *PlayerInfo            `protobuf:"bytes,10,opt,name=out_player,json=outPlayer,proto3" json:"out_player,omitempty"`     // 换下球员
	ReasonType    int32                  `protobuf:"varint,11,opt,name=reason_type,json=reasonType,proto3" json:"reason_type,omitempty"` // 红黄牌、换人事件原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerIncident) Reset() {
	*x = PlayerIncident{}
	mi := &file_proto_sloth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerIncident) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerIncident) ProtoMessage() {}

func (x *PlayerIncident) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerIncident.ProtoReflect.Descriptor instead.
func (*PlayerIncident) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{9}
}

func (x *PlayerIncident) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PlayerIncident) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *PlayerIncident) GetBelong() int32 {
	if x != nil {
		return x.Belong
	}
	return 0
}

func (x *PlayerIncident) GetHomeScore() int32 {
	if x != nil {
		return x.HomeScore
	}
	return 0
}

func (x *PlayerIncident) GetAwayScore() int32 {
	if x != nil {
		return x.AwayScore
	}
	return 0
}

func (x *PlayerIncident) GetPlayer() *PlayerInfo {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *PlayerIncident) GetAssist1() *PlayerInfo {
	if x != nil {
		return x.Assist1
	}
	return nil
}

func (x *PlayerIncident) GetAssist2() *PlayerInfo {
	if x != nil {
		return x.Assist2
	}
	return nil
}

func (x *PlayerIncident) GetInPlayer() *PlayerInfo {
	if x != nil {
		return x.InPlayer
	}
	return nil
}

func (x *PlayerIncident) GetOutPlayer() *PlayerInfo {
	if x != nil {
		return x.OutPlayer
	}
	return nil
}

func (x *PlayerIncident) GetReasonType() int32 {
	if x != nil {
		return x.ReasonType
	}
	return 0
}

// 事件中涉及的球员
type PlayerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`    // 球员id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 中文名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	mi := &file_proto_sloth_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 球员信息
type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                        // 球员id
	TeamId        int32                  `protobuf:"varint,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                  // 球队id
	First         int32                  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`                                  // 是否首发，1-是、0-否
	Captain       int32                  `protobuf:"varint,4,opt,name=captain,proto3" json:"captain,omitempty"`                              // 是否队长，1-是、0-否
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                     // 球员名称
	Logo          string                 `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`                                     // 球员logo
	NationalLogo  string                 `protobuf:"bytes,7,opt,name=national_logo,json=nationalLogo,proto3" json:"national_logo,omitempty"` // 球员logo(国家队)
	ShirtNumber   int32                  `protobuf:"varint,8,opt,name=shirt_number,json=shirtNumber,proto3" json:"shirt_number,omitempty"`   // 球衣号
	Position      string                 `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`                             // 球员位置，F前锋、M中场、D后卫、G守门员
	X             int32                  `protobuf:"varint,10,opt,name=x,proto3" json:"x,omitempty"`                                         // 阵容x坐标，总共100
	Y             int32                  `protobuf:"varint,11,opt,name=y,proto3" json:"y,omitempty"`                                         // 阵容y坐标，总共100
	Rating        string                 `protobuf:"bytes,12,opt,name=rating,proto3" json:"rating,omitempty"`                                // 评分，10为满分
	Incidents     []*PlayerIncident      `protobuf:"bytes,13,rep,name=incidents,proto3" json:"incidents,omitempty"`                          // 球员事件列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_proto_sloth_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{11}
}

func (x *Player) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Player) GetFirst() int32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *Player) GetCaptain() int32 {
	if x != nil {
		return x.Captain
	}
	return 0
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Player) GetNationalLogo() string {
	if x != nil {
		return x.NationalLogo
	}
	return ""
}

func (x *Player) GetShirtNumber() int32 {
	if x != nil {
		return x.ShirtNumber
	}
	return 0
}

func (x *Player) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Player) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Player) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Player) GetRating() string {
	if x != nil {
		return x.Rating
	}
	return ""
}

func (x *Player) GetIncidents() []*PlayerIncident {
	if x != nil {
		return x.Incidents
	}
	return nil
}

// 比赛阵容实时数据
type MatchLineupDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Confirmed     int32                  `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`                             // 正式阵容，1-是、0-否
	HomeFormation string                 `protobuf:"bytes,2,opt,name=home_formation,json=homeFormation,proto3" json:"home_formation,omitempty"` // 主队阵型
	AwayFormation string                 `protobuf:"bytes,3,opt,name=away_formation,json=awayFormation,proto3" json:"away_formation,omitempty"` // 客队阵型
	HomeColor     string                 `protobuf:"bytes,4,opt,name=home_color,json=homeColor,proto3" json:"home_color,omitempty"`             // 主队球衣颜色
	AwayColor     string                 `protobuf:"bytes,5,opt,name=away_color,json=awayColor,proto3" json:"away_color,omitempty"`             // 客队球衣颜色
	Home          []*Player              `protobuf:"bytes,6,rep,name=home,proto3" json:"home,omitempty"`                                        // 主队阵型球员列表
	Away          []*Player              `protobuf:"bytes,7,rep,name=away,proto3" json:"away,omitempty"`                                        // 客队阵型球员列表
	HomeId        int32                  `protobuf:"varint,8,opt,name=home_id,json=homeId,proto3" json:"home_id,omitempty"`                     // 主队Id
	HomeLogo      string                 `protobuf:"bytes,9,opt,name=home_logo,json=homeLogo,proto3" json:"home_logo,omitempty"`                // 主队logo
	AwayId        int32                  `protobuf:"varint,10,opt,name=away_id,json=awayId,proto3" json:"away_id,omitempty"`                    // 客队Id
	AwayLogo      string                 `protobuf:"bytes,11,opt,name=away_logo,json=awayLogo,proto3" json:"away_logo,omitempty"`               // 客队logo
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLineupDetail) Reset() {
	*x = MatchLineupDetail{}
	mi := &file_proto_sloth_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLineupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineupDetail) ProtoMessage() {}

func (x *MatchLineupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineupDetail.ProtoReflect.Descriptor instead.
func (*MatchLineupDetail) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{12}
}

func (x *MatchLineupDetail) GetConfirmed() int32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *MatchLineupDetail) GetHomeFormation() string {
	if x != nil {
		return x.HomeFormation
	}
	return ""
}

func (x *MatchLineupDetail) GetAwayFormation() string {
	if x != nil {
		return x.AwayFormation
	}
	return ""
}

func (x *MatchLineupDetail) GetHomeColor() string {
	if x != nil {
		return x.HomeColor
	}
	return ""
}

func (x *MatchLineupDetail) GetAwayColor() string {
	if x != nil {
		return x.AwayColor
	}
	return ""
}

func (x *MatchLineupDetail) GetHome() []*Player {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *MatchLineupDetail) GetAway() []*Player {
	if x != nil {
		return x.Away
	}
	return nil
}

func (x *MatchLineupDetail) GetHomeId() int32 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *MatchLineupDetail) GetHomeLogo() string {
	if x != nil {
		return x.HomeLogo
	}
	return ""
}

func (x *MatchLineupDetail) GetAwayId() int32 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *MatchLineupDetail) GetAwayLogo() string {
	if x != nil {
		return x.AwayLogo
	}
	return ""
}

// 球队积分项
type TeamStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeamId        int32                  `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`                   // 球队id
	Points        int32                  `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`                                 // 积分
	Total         int32                  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`                                   // 比赛场次
	Won           int32                  `protobuf:"varint,4,opt,name=won,proto3" json:"won,omitempty"`                                       // 胜的场次
	Draw          int32                  `protobuf:"varint,5,opt,name=draw,proto3" json:"draw,omitempty"`                                     // 平的场次
	Loss          int32                  `protobuf:"varint,6,opt,name=loss,proto3" json:"loss,omitempty"`                                     // 负的场次
	Goals         int32                  `protobuf:"varint,7,opt,name=goals,proto3" json:"goals,omitempty"`                                   // 进球
	GoalsAgainst  int32                  `protobuf:"varint,8,opt,name=goals_against,json=goalsAgainst,proto3" json:"goals_against,omitempty"` // 失球
	TeamName      string                 `protobuf:"bytes,9,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`              // 球队名称
	TeamLogo      string                 `protobuf:"bytes,10,opt,name=team_logo,json=teamLogo,proto3" json:"team_logo,omitempty"`             // 球队logo
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	mi := &file_proto_sloth_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{13}
}

func (x *TeamStats) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *TeamStats) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *TeamStats) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TeamStats) GetWon() int32 {
	if x != nil {
		return x.Won
	}
	return 0
}

func (x *TeamStats) GetDraw() int32 {
	if x != nil {
		return x.Draw
	}
	return 0
}

func (x *TeamStats) GetLoss() int32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *TeamStats) GetGoals() int32 {
	if x != nil {
		return x.Goals
	}
	return 0
}

func (x *TeamStats) GetGoalsAgainst() int32 {
	if x != nil {
		return x.GoalsAgainst
	}
	return 0
}

func (x *TeamStats) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *TeamStats) GetTeamLogo() string {
	if x != nil {
		return x.TeamLogo
	}
	return ""
}

// 积分榜信息
type Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                          // 积分榜表id
	Conference    string                 `protobuf:"bytes,2,opt,name=conference,proto3" json:"conference,omitempty"`           // 分区信息（极少部分赛事才有，比如美职联）
	Group         int32                  `protobuf:"varint,3,opt,name=group,proto3" json:"group,omitempty"`                    // 不为0表示分组赛的第几组，1-A、2-B以此类推
	StageId       int32                  `protobuf:"varint,4,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"` // 所属阶段id
	Rows          []*TeamStats           `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`                       // 球队积分项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Table) Reset() {
	*x = Table{}
	mi := &file_proto_sloth_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{14}
}

func (x *Table) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Table) GetConference() string {
	if x != nil {
		return x.Conference
	}
	return ""
}

func (x *Table) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *Table) GetStageId() int32 {
	if x != nil {
		return x.StageId
	}
	return 0
}

func (x *Table) GetRows() []*TeamStats {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 包含多个积分榜
type CompetitionTables struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*Table               `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"` // 积分榜列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompetitionTables) Reset() {
	*x = CompetitionTables{}
	mi := &file_proto_sloth_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitionTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionTables) ProtoMessage() {}

func (x *CompetitionTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionTables.ProtoReflect.Descriptor instead.
func (*CompetitionTables) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{15}
}

func (x *CompetitionTables) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

// 定义 Data 类型，表示 int 的嵌套列表
type MatchTrendData_Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []int32                `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchTrendData_Data) Reset() {
	*x = MatchTrendData_Data{}
	mi := &file_proto_sloth_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchTrendData_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrendData_Data) ProtoMessage() {}

func (x *MatchTrendData_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrendData_Data.ProtoReflect.Descriptor instead.
func (*MatchTrendData_Data) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MatchTrendData_Data) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Incidents 内部类
type MatchTrendData_Incidents struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 时间(分钟)
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// 事件发生方，1-主队、2-客队
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// 类型，详见状态码->技术统计
	Type          int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchTrendData_Incidents) Reset() {
	*x = MatchTrendData_Incidents{}
	mi := &file_proto_sloth_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchTrendData_Incidents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrendData_Incidents) ProtoMessage() {}

func (x *MatchTrendData_Incidents) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sloth_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrendData_Incidents.ProtoReflect.Descriptor instead.
func (*MatchTrendData_Incidents) Descriptor() ([]byte, []int) {
	return file_proto_sloth_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MatchTrendData_Incidents) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MatchTrendData_Incidents) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *MatchTrendData_Incidents) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

var File_proto_sloth_proto protoreflect.FileDescriptor

var file_proto_sloth_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x72, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x6d, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x33, 0x75, 0x38, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x33, 0x75, 0x38, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x76, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x76, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x65,
	0x72, 0x1a, 0x1e, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x4b, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x22,
	0xa3, 0x03, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6c, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x05, 0x74, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x61, 0x6c,
	0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x5b, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61,
	0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x42, 0x0a,
	0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x22, 0x22, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x05, 0x54, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x08, 0x0a, 0x08, 0x49,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68,
	0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x7a, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x31, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x4e, 0x61, 0x6d,
	0x65, 0x5a, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x4e, 0x61, 0x6d,
	0x65, 0x5a, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x68, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x5a, 0x68, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x32, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6f,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x31, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61,
	0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x32, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78,
	0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x69, 0x72, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x68, 0x69, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x03,
	0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x77, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61,
	0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x09,
	0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x77,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x41, 0x67,
	0x61, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x6f, 0x22,
	0x9c, 0x01, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78,
	0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x47,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_sloth_proto_rawDescOnce sync.Once
	file_proto_sloth_proto_rawDescData []byte
)

func file_proto_sloth_proto_rawDescGZIP() []byte {
	file_proto_sloth_proto_rawDescOnce.Do(func() {
		file_proto_sloth_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_sloth_proto_rawDesc), len(file_proto_sloth_proto_rawDesc)))
	})
	return file_proto_sloth_proto_rawDescData
}

var file_proto_sloth_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_sloth_proto_goTypes = []any{
	(*MatchLiveStream)(nil),          // 0: galaxy.client.proto.MatchLiveStream
	(*MatchTrendData)(nil),           // 1: galaxy.client.proto.MatchTrendData
	(*TrendInfo)(nil),                // 2: galaxy.client.proto.TrendInfo
	(*MatchLiveData)(nil),            // 3: galaxy.client.proto.MatchLiveData
	(*ScoreData)(nil),                // 4: galaxy.client.proto.ScoreData
	(*Stat)(nil),                     // 5: galaxy.client.proto.Stat
	(*IntArray)(nil),                 // 6: galaxy.client.proto.IntArray
	(*TLive)(nil),                    // 7: galaxy.client.proto.TLive
	(*Incident)(nil),                 // 8: galaxy.client.proto.Incident
	(*PlayerIncident)(nil),           // 9: galaxy.client.proto.PlayerIncident
	(*PlayerInfo)(nil),               // 10: galaxy.client.proto.PlayerInfo
	(*Player)(nil),                   // 11: galaxy.client.proto.Player
	(*MatchLineupDetail)(nil),        // 12: galaxy.client.proto.MatchLineupDetail
	(*TeamStats)(nil),                // 13: galaxy.client.proto.TeamStats
	(*Table)(nil),                    // 14: galaxy.client.proto.Table
	(*CompetitionTables)(nil),        // 15: galaxy.client.proto.CompetitionTables
	(*MatchTrendData_Data)(nil),      // 16: galaxy.client.proto.MatchTrendData.Data
	(*MatchTrendData_Incidents)(nil), // 17: galaxy.client.proto.MatchTrendData.Incidents
	nil,                              // 18: galaxy.client.proto.MatchLiveData.TeamStatsEntry
}
var file_proto_sloth_proto_depIdxs = []int32{
	16, // 0: galaxy.client.proto.MatchTrendData.data:type_name -> galaxy.client.proto.MatchTrendData.Data
	17, // 1: galaxy.client.proto.MatchTrendData.incidents:type_name -> galaxy.client.proto.MatchTrendData.Incidents
	4,  // 2: galaxy.client.proto.MatchLiveData.score:type_name -> galaxy.client.proto.ScoreData
	5,  // 3: galaxy.client.proto.MatchLiveData.stats:type_name -> galaxy.client.proto.Stat
	7,  // 4: galaxy.client.proto.MatchLiveData.tlive:type_name -> galaxy.client.proto.TLive
	8,  // 5: galaxy.client.proto.MatchLiveData.incidents:type_name -> galaxy.client.proto.Incident
	18, // 6: galaxy.client.proto.MatchLiveData.teamStats:type_name -> galaxy.client.proto.MatchLiveData.TeamStatsEntry
	10, // 7: galaxy.client.proto.PlayerIncident.player:type_name -> galaxy.client.proto.PlayerInfo
	10, // 8: galaxy.client.proto.PlayerIncident.assist1:type_name -> galaxy.client.proto.PlayerInfo
	10, // 9: galaxy.client.proto.PlayerIncident.assist2:type_name -> galaxy.client.proto.PlayerInfo
	10, // 10: galaxy.client.proto.PlayerIncident.in_player:type_name -> galaxy.client.proto.PlayerInfo
	10, // 11: galaxy.client.proto.PlayerIncident.out_player:type_name -> galaxy.client.proto.PlayerInfo
	9,  // 12: galaxy.client.proto.Player.incidents:type_name -> galaxy.client.proto.PlayerIncident
	11, // 13: galaxy.client.proto.MatchLineupDetail.home:type_name -> galaxy.client.proto.Player
	11, // 14: galaxy.client.proto.MatchLineupDetail.away:type_name -> galaxy.client.proto.Player
	13, // 15: galaxy.client.proto.Table.rows:type_name -> galaxy.client.proto.TeamStats
	14, // 16: galaxy.client.proto.CompetitionTables.tables:type_name -> galaxy.client.proto.Table
	6,  // 17: galaxy.client.proto.MatchLiveData.TeamStatsEntry.value:type_name -> galaxy.client.proto.IntArray
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_sloth_proto_init() }
func file_proto_sloth_proto_init() {
	if File_proto_sloth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_sloth_proto_rawDesc), len(file_proto_sloth_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_sloth_proto_goTypes,
		DependencyIndexes: file_proto_sloth_proto_depIdxs,
		MessageInfos:      file_proto_sloth_proto_msgTypes,
	}.Build()
	File_proto_sloth_proto = out.File
	file_proto_sloth_proto_goTypes = nil
	file_proto_sloth_proto_depIdxs = nil
}
