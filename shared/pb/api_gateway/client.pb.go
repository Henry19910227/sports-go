// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: proto/client.proto

package api_gateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 7-7: 登录游戏服
type LoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                   //required 用户Id。cocos 实际范围为 int32；h5 为 int64
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`                                //required 登录token。client从大厅/商户登录获取
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                            // client 壳版本。仅供 cocos 捕鱼判断是否为旧版本
	Base          string                 `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`                                  // 热更版本。仅供 cocos 连 logon 使用，其他不要传
	GameVersion   string                 `protobuf:"bytes,5,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"` // 小游戏版本。仅供 cocos 连 logon 使用，其他不要传
	Platform      int32                  `protobuf:"varint,6,opt,name=platform,proto3" json:"platform,omitempty"`                         // 账号平台 2=2n1（默认）、4=h5试玩、5=h5。cocos 可不传
	Server        int32                  `protobuf:"varint,7,opt,name=server,proto3" json:"server,omitempty"`                             // serverId。游戏服有合并端口，cocos 用此字段识别进哪个服
	Lang          string                 `protobuf:"bytes,8,opt,name=lang,proto3" json:"lang,omitempty"`                                  // client端语言，可不传，默认 zh-CN
	OddType       int32                  `protobuf:"varint,9,opt,name=odd_type,json=oddType,proto3" json:"odd_type,omitempty"`            //赔率类型, 0-欧盘 1-香港盘
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	mi := &file_proto_client_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *LoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LoginReq) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *LoginReq) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *LoginReq) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *LoginReq) GetServer() int32 {
	if x != nil {
		return x.Server
	}
	return 0
}

func (x *LoginReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *LoginReq) GetOddType() int32 {
	if x != nil {
		return x.OddType
	}
	return 0
}

type LoginResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	mi := &file_proto_client_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LoginResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 7-9: 切换语言
type ChangeLangReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lang          string                 `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"` //required client端语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeLangReq) Reset() {
	*x = ChangeLangReq{}
	mi := &file_proto_client_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeLangReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLangReq) ProtoMessage() {}

func (x *ChangeLangReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLangReq.ProtoReflect.Descriptor instead.
func (*ChangeLangReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeLangReq) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// 7-10: 离开游戏（无携带消息）
type LogoutReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	mi := &file_proto_client_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{3}
}

// 7-100: ping消息, 客户端回传数据。纯回传，server 无业务处理，无返回
type PingBackReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          string                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // 纯文本数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingBackReq) Reset() {
	*x = PingBackReq{}
	mi := &file_proto_client_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingBackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingBackReq) ProtoMessage() {}

func (x *PingBackReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingBackReq.ProtoReflect.Descriptor instead.
func (*PingBackReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{4}
}

func (x *PingBackReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 500-1000: 获取赛事统计
type StatisticalReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatisticalReq) Reset() {
	*x = StatisticalReq{}
	mi := &file_proto_client_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticalReq) ProtoMessage() {}

func (x *StatisticalReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticalReq.ProtoReflect.Descriptor instead.
func (*StatisticalReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{5}
}

type StatisticalResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statistical   []*PlayTypeStatistical `protobuf:"bytes,1,rep,name=statistical,proto3" json:"statistical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatisticalResp) Reset() {
	*x = StatisticalResp{}
	mi := &file_proto_client_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticalResp) ProtoMessage() {}

func (x *StatisticalResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticalResp.ProtoReflect.Descriptor instead.
func (*StatisticalResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{6}
}

func (x *StatisticalResp) GetStatistical() []*PlayTypeStatistical {
	if x != nil {
		return x.Statistical
	}
	return nil
}

// 500-1001: 获取联赛信息
type ListTournamentReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SportId       int32                  `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`       //required 球类id
	PlayType      int32                  `protobuf:"varint,2,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`    //required 玩法类型, 0-全部 1-滚球 2-今日 3-早盘 4-冠军
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间，13 位时间戳，按赛事开赛时间范围查询
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       //结束时间，13 位时间戳，按赛事开赛时间范围查询
	Size          int32                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`                            //查询数量 0为查询所有
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTournamentReq) Reset() {
	*x = ListTournamentReq{}
	mi := &file_proto_client_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTournamentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentReq) ProtoMessage() {}

func (x *ListTournamentReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentReq.ProtoReflect.Descriptor instead.
func (*ListTournamentReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{7}
}

func (x *ListTournamentReq) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *ListTournamentReq) GetPlayType() int32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ListTournamentReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ListTournamentReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ListTournamentReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListTournamentResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tournament    []*Tournament          `protobuf:"bytes,1,rep,name=tournament,proto3" json:"tournament,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTournamentResp) Reset() {
	*x = ListTournamentResp{}
	mi := &file_proto_client_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTournamentResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTournamentResp) ProtoMessage() {}

func (x *ListTournamentResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTournamentResp.ProtoReflect.Descriptor instead.
func (*ListTournamentResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{8}
}

func (x *ListTournamentResp) GetTournament() []*Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

// 500-1002: 获取比赛列表，盘口信息只返回热门盘口
type ListMatchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SportId       int32                  `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`                //required 球类id
	PlayType      int32                  `protobuf:"varint,2,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`             //required 玩法类型, 0-全部 1-滚球 2-今日 3-早盘 4-冠军
	TournamentId  int32                  `protobuf:"varint,3,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"` //联赛id
	StartTime     int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`          //开始时间,13 位时间戳
	EndTime       int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                //结束时间,13 位时间戳
	Page          int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                                     // 请求的页数,从1开始
	Size          int32                  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                     // 每页显示数量,最大50
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMatchReq) Reset() {
	*x = ListMatchReq{}
	mi := &file_proto_client_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMatchReq) ProtoMessage() {}

func (x *ListMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMatchReq.ProtoReflect.Descriptor instead.
func (*ListMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{9}
}

func (x *ListMatchReq) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *ListMatchReq) GetPlayType() int32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *ListMatchReq) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *ListMatchReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ListMatchReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *ListMatchReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMatchReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListMatchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总比赛数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMatchResp) Reset() {
	*x = ListMatchResp{}
	mi := &file_proto_client_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMatchResp) ProtoMessage() {}

func (x *ListMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMatchResp.ProtoReflect.Descriptor instead.
func (*ListMatchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{10}
}

func (x *ListMatchResp) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListMatchResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 500-1003: 获取比赛详情
type GetMatchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       []int64                `protobuf:"varint,1,rep,packed,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchReq) Reset() {
	*x = GetMatchReq{}
	mi := &file_proto_client_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchReq) ProtoMessage() {}

func (x *GetMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchReq.ProtoReflect.Descriptor instead.
func (*GetMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{11}
}

func (x *GetMatchReq) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type GetMatchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMatchResp) Reset() {
	*x = GetMatchResp{}
	mi := &file_proto_client_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchResp) ProtoMessage() {}

func (x *GetMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchResp.ProtoReflect.Descriptor instead.
func (*GetMatchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{12}
}

func (x *GetMatchResp) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

// 500-1004: 获取球类信息
type ListSportReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSportReq) Reset() {
	*x = ListSportReq{}
	mi := &file_proto_client_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSportReq) ProtoMessage() {}

func (x *ListSportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSportReq.ProtoReflect.Descriptor instead.
func (*ListSportReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{13}
}

type ListSportResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sport         []*Sport               `protobuf:"bytes,1,rep,name=sport,proto3" json:"sport,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSportResp) Reset() {
	*x = ListSportResp{}
	mi := &file_proto_client_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSportResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSportResp) ProtoMessage() {}

func (x *ListSportResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSportResp.ProtoReflect.Descriptor instead.
func (*ListSportResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{14}
}

func (x *ListSportResp) GetSport() []*Sport {
	if x != nil {
		return x.Sport
	}
	return nil
}

// 500-1005: 查询余额
type BalanceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceReq) Reset() {
	*x = BalanceReq{}
	mi := &file_proto_client_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceReq) ProtoMessage() {}

func (x *BalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceReq.ProtoReflect.Descriptor instead.
func (*BalanceReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{15}
}

// 500-1006: 查询联赛比赛
type TournamentMatchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TournamentId  int32                  `protobuf:"varint,3,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"` //required 联赛id
	Page          int32                  `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`                                     // 请求的页数,从1开始
	Size          int32                  `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`                                     // 每页显示数量,最大50
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TournamentMatchReq) Reset() {
	*x = TournamentMatchReq{}
	mi := &file_proto_client_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatchReq) ProtoMessage() {}

func (x *TournamentMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatchReq.ProtoReflect.Descriptor instead.
func (*TournamentMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{16}
}

func (x *TournamentMatchReq) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *TournamentMatchReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TournamentMatchReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type TournamentMatchResp struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Match               []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	Total               int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总比赛数量
	TournamentName      string                 `protobuf:"bytes,3,opt,name=tournament_name,json=tournamentName,proto3" json:"tournament_name,omitempty"`
	TournamentShortName string                 `protobuf:"bytes,4,opt,name=tournament_short_name,json=tournamentShortName,proto3" json:"tournament_short_name,omitempty"`
	Icon                string                 `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Color               string                 `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"` //配色
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TournamentMatchResp) Reset() {
	*x = TournamentMatchResp{}
	mi := &file_proto_client_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TournamentMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentMatchResp) ProtoMessage() {}

func (x *TournamentMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentMatchResp.ProtoReflect.Descriptor instead.
func (*TournamentMatchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{17}
}

func (x *TournamentMatchResp) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *TournamentMatchResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TournamentMatchResp) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *TournamentMatchResp) GetTournamentShortName() string {
	if x != nil {
		return x.TournamentShortName
	}
	return ""
}

func (x *TournamentMatchResp) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TournamentMatchResp) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// 500-1007: 盘口分类
type MarketTypeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketTypeReq) Reset() {
	*x = MarketTypeReq{}
	mi := &file_proto_client_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTypeReq) ProtoMessage() {}

func (x *MarketTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTypeReq.ProtoReflect.Descriptor instead.
func (*MarketTypeReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{18}
}

func (x *MarketTypeReq) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MarketTypeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketType    []*MarketType          `protobuf:"bytes,1,rep,name=marketType,proto3" json:"marketType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketTypeResp) Reset() {
	*x = MarketTypeResp{}
	mi := &file_proto_client_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketTypeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketTypeResp) ProtoMessage() {}

func (x *MarketTypeResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketTypeResp.ProtoReflect.Descriptor instead.
func (*MarketTypeResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{19}
}

func (x *MarketTypeResp) GetMarketType() []*MarketType {
	if x != nil {
		return x.MarketType
	}
	return nil
}

type BalanceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       string                 `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"` //余额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResp) Reset() {
	*x = BalanceResp{}
	mi := &file_proto_client_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResp) ProtoMessage() {}

func (x *BalanceResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResp.ProtoReflect.Descriptor instead.
func (*BalanceResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{20}
}

func (x *BalanceResp) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

// 500-1015: 单关下注
type SingleBetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`             //required 比赛id
	SelectionId   int64                  `protobuf:"varint,2,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"` //required 选项id
	Odds          string                 `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`                                   //required 赔率
	BetAmount     string                 `protobuf:"bytes,4,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`        //required 投注
	OddsChange    int32                  `protobuf:"varint,5,opt,name=odds_change,json=oddsChange,proto3" json:"odds_change,omitempty"`    //required 接受赔率变化类型,0:不接受赔率变动 1:接受最优赔率变动 2:接受任意赔率变动
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleBetReq) Reset() {
	*x = SingleBetReq{}
	mi := &file_proto_client_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBetReq) ProtoMessage() {}

func (x *SingleBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBetReq.ProtoReflect.Descriptor instead.
func (*SingleBetReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{21}
}

func (x *SingleBetReq) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *SingleBetReq) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *SingleBetReq) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *SingleBetReq) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *SingleBetReq) GetOddsChange() int32 {
	if x != nil {
		return x.OddsChange
	}
	return 0
}

type SingleBetResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 例如："Bet placed successfully."
	OrderId        string                 `protobuf:"bytes,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderStatus    int32                  `protobuf:"varint,4,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`           // 订单状态 0创建成功，1确认中，2拒单，3取消订单，4接单成功，5已结算
	OrderStatusMsg string                 `protobuf:"bytes,5,opt,name=order_status_msg,json=orderStatusMsg,proto3" json:"order_status_msg,omitempty"` // 订单状态msg
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SingleBetResp) Reset() {
	*x = SingleBetResp{}
	mi := &file_proto_client_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleBetResp) ProtoMessage() {}

func (x *SingleBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleBetResp.ProtoReflect.Descriptor instead.
func (*SingleBetResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{22}
}

func (x *SingleBetResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SingleBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SingleBetResp) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *SingleBetResp) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *SingleBetResp) GetOrderStatusMsg() string {
	if x != nil {
		return x.OrderStatusMsg
	}
	return ""
}

// 500-1010: 多关下注
type MultipleBetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bet           []*BetOption           `protobuf:"bytes,1,rep,name=bet,proto3" json:"bet,omitempty"`     // 投注项
	Combo         []*BetCombo            `protobuf:"bytes,2,rep,name=combo,proto3" json:"combo,omitempty"` // 串关方式
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultipleBetReq) Reset() {
	*x = MultipleBetReq{}
	mi := &file_proto_client_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleBetReq) ProtoMessage() {}

func (x *MultipleBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleBetReq.ProtoReflect.Descriptor instead.
func (*MultipleBetReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{23}
}

func (x *MultipleBetReq) GetBet() []*BetOption {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *MultipleBetReq) GetCombo() []*BetCombo {
	if x != nil {
		return x.Combo
	}
	return nil
}

type MultipleBetResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 例如："Bet placed successfully."
	PlaceBetInfo  []*PlaceBetInfo        `protobuf:"bytes,3,rep,name=place_bet_info,json=placeBetInfo,proto3" json:"place_bet_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultipleBetResp) Reset() {
	*x = MultipleBetResp{}
	mi := &file_proto_client_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultipleBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleBetResp) ProtoMessage() {}

func (x *MultipleBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleBetResp.ProtoReflect.Descriptor instead.
func (*MultipleBetResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{24}
}

func (x *MultipleBetResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MultipleBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MultipleBetResp) GetPlaceBetInfo() []*PlaceBetInfo {
	if x != nil {
		return x.PlaceBetInfo
	}
	return nil
}

// 500-1011: 发起提前结算
type EarlySettleReq struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BetId             string                 `protobuf:"bytes,1,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                        //required 注单id
	Amount            string                 `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`                                                   //required 提前结算本金
	ExpectPrice       string                 `protobuf:"bytes,3,opt,name=expect_price,json=expectPrice,proto3" json:"expect_price,omitempty"`                      //required 期望提前结算单位价格
	AcceptPriceReduce bool                   `protobuf:"varint,4,opt,name=accept_price_reduce,json=acceptPriceReduce,proto3" json:"accept_price_reduce,omitempty"` //required false:不接受价格变低 true:接受价格变低下注
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EarlySettleReq) Reset() {
	*x = EarlySettleReq{}
	mi := &file_proto_client_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarlySettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlySettleReq) ProtoMessage() {}

func (x *EarlySettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlySettleReq.ProtoReflect.Descriptor instead.
func (*EarlySettleReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{25}
}

func (x *EarlySettleReq) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *EarlySettleReq) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *EarlySettleReq) GetExpectPrice() string {
	if x != nil {
		return x.ExpectPrice
	}
	return ""
}

func (x *EarlySettleReq) GetAcceptPriceReduce() bool {
	if x != nil {
		return x.AcceptPriceReduce
	}
	return false
}

type EarlySettleResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 例如："Bet placed successfully."
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EarlySettleResp) Reset() {
	*x = EarlySettleResp{}
	mi := &file_proto_client_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarlySettleResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlySettleResp) ProtoMessage() {}

func (x *EarlySettleResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlySettleResp.ProtoReflect.Descriptor instead.
func (*EarlySettleResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{26}
}

func (x *EarlySettleResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *EarlySettleResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1012: 获取用户下注记录列表
type GetOrderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settled       bool                   `protobuf:"varint,1,opt,name=settled,proto3" json:"settled,omitempty"`                       //required  false-未结算 true-已结算
	StartTime     int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //开始时间,13位时间戳
	EndTime       int64                  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //结束时间,13位时间戳
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                             //required 当前页码
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`     //required 每页大小
	SportId       []int32                `protobuf:"varint,6,rep,packed,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"` // 球类id
	MatchId       int64                  `protobuf:"varint,7,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`        // 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderReq) Reset() {
	*x = GetOrderReq{}
	mi := &file_proto_client_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderReq) ProtoMessage() {}

func (x *GetOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderReq.ProtoReflect.Descriptor instead.
func (*GetOrderReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{27}
}

func (x *GetOrderReq) GetSettled() bool {
	if x != nil {
		return x.Settled
	}
	return false
}

func (x *GetOrderReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetOrderReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetOrderReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetOrderReq) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetOrderReq) GetSportId() []int32 {
	if x != nil {
		return x.SportId
	}
	return nil
}

func (x *GetOrderReq) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type GetOrderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         []*Order               `protobuf:"bytes,1,rep,name=order,proto3" json:"order,omitempty"`  // 下注记录
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总条数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderResp) Reset() {
	*x = GetOrderResp{}
	mi := &file_proto_client_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResp) ProtoMessage() {}

func (x *GetOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResp.ProtoReflect.Descriptor instead.
func (*GetOrderResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{28}
}

func (x *GetOrderResp) GetOrder() []*Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *GetOrderResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 500-1013: 获取单关下注限额
type GetSingleRiskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Selection     []*RiskSelection       `protobuf:"bytes,1,rep,name=selection,proto3" json:"selection,omitempty"` // 选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSingleRiskReq) Reset() {
	*x = GetSingleRiskReq{}
	mi := &file_proto_client_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSingleRiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleRiskReq) ProtoMessage() {}

func (x *GetSingleRiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleRiskReq.ProtoReflect.Descriptor instead.
func (*GetSingleRiskReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{29}
}

func (x *GetSingleRiskReq) GetSelection() []*RiskSelection {
	if x != nil {
		return x.Selection
	}
	return nil
}

type GetSingleRiskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Risk          []*RiskSingleBet       `protobuf:"bytes,1,rep,name=risk,proto3" json:"risk,omitempty"` //限额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSingleRiskResp) Reset() {
	*x = GetSingleRiskResp{}
	mi := &file_proto_client_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSingleRiskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleRiskResp) ProtoMessage() {}

func (x *GetSingleRiskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleRiskResp.ProtoReflect.Descriptor instead.
func (*GetSingleRiskResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{30}
}

func (x *GetSingleRiskResp) GetRisk() []*RiskSingleBet {
	if x != nil {
		return x.Risk
	}
	return nil
}

// 500-1014: 获取窜关下注限额
type GetComboRiskReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Selection     []*RiskSelection       `protobuf:"bytes,1,rep,name=selection,proto3" json:"selection,omitempty"` // 选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetComboRiskReq) Reset() {
	*x = GetComboRiskReq{}
	mi := &file_proto_client_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetComboRiskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComboRiskReq) ProtoMessage() {}

func (x *GetComboRiskReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComboRiskReq.ProtoReflect.Descriptor instead.
func (*GetComboRiskReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{31}
}

func (x *GetComboRiskReq) GetSelection() []*RiskSelection {
	if x != nil {
		return x.Selection
	}
	return nil
}

type GetComboRiskResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Risk          []*RiskComboBet        `protobuf:"bytes,1,rep,name=risk,proto3" json:"risk,omitempty"` //限额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetComboRiskResp) Reset() {
	*x = GetComboRiskResp{}
	mi := &file_proto_client_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetComboRiskResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComboRiskResp) ProtoMessage() {}

func (x *GetComboRiskResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComboRiskResp.ProtoReflect.Descriptor instead.
func (*GetComboRiskResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{32}
}

func (x *GetComboRiskResp) GetRisk() []*RiskComboBet {
	if x != nil {
		return x.Risk
	}
	return nil
}

// 500-1016: 提前结算报价
type EarlySettlePriceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BetId         []string               `protobuf:"bytes,1,rep,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"` //required 注单id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EarlySettlePriceReq) Reset() {
	*x = EarlySettlePriceReq{}
	mi := &file_proto_client_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarlySettlePriceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlySettlePriceReq) ProtoMessage() {}

func (x *EarlySettlePriceReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlySettlePriceReq.ProtoReflect.Descriptor instead.
func (*EarlySettlePriceReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{33}
}

func (x *EarlySettlePriceReq) GetBetId() []string {
	if x != nil {
		return x.BetId
	}
	return nil
}

type EarlySettlePriceResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         []*EarlySettlePrice    `protobuf:"bytes,1,rep,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EarlySettlePriceResp) Reset() {
	*x = EarlySettlePriceResp{}
	mi := &file_proto_client_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarlySettlePriceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlySettlePriceResp) ProtoMessage() {}

func (x *EarlySettlePriceResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlySettlePriceResp.ProtoReflect.Descriptor instead.
func (*EarlySettlePriceResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{34}
}

func (x *EarlySettlePriceResp) GetPrice() []*EarlySettlePrice {
	if x != nil {
		return x.Price
	}
	return nil
}

// 500-1020: 预约下注
type ReserveBetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bet           *BetOption             `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`                               // 投注项
	BetAmount     int64                  `protobuf:"varint,2,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"` //required  每笔下注金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveBetReq) Reset() {
	*x = ReserveBetReq{}
	mi := &file_proto_client_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBetReq) ProtoMessage() {}

func (x *ReserveBetReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBetReq.ProtoReflect.Descriptor instead.
func (*ReserveBetReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{35}
}

func (x *ReserveBetReq) GetBet() *BetOption {
	if x != nil {
		return x.Bet
	}
	return nil
}

func (x *ReserveBetReq) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

type ReserveBetResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveBetResp) Reset() {
	*x = ReserveBetResp{}
	mi := &file_proto_client_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveBetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveBetResp) ProtoMessage() {}

func (x *ReserveBetResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveBetResp.ProtoReflect.Descriptor instead.
func (*ReserveBetResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{36}
}

func (x *ReserveBetResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReserveBetResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1021: 获取用户预约下注记录列表
type GetReserveOrderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     int64                  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  //开始时间,13位时间戳
	EndTime       int64                  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        //结束时间,13位时间戳
	SportId       []int32                `protobuf:"varint,3,rep,packed,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"` // 球类id
	MatchId       int64                  `protobuf:"varint,4,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`        // 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReserveOrderReq) Reset() {
	*x = GetReserveOrderReq{}
	mi := &file_proto_client_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReserveOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReserveOrderReq) ProtoMessage() {}

func (x *GetReserveOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReserveOrderReq.ProtoReflect.Descriptor instead.
func (*GetReserveOrderReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{37}
}

func (x *GetReserveOrderReq) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetReserveOrderReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetReserveOrderReq) GetSportId() []int32 {
	if x != nil {
		return x.SportId
	}
	return nil
}

func (x *GetReserveOrderReq) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type GetReserveOrderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         []*ReserveOrder        `protobuf:"bytes,1,rep,name=order,proto3" json:"order,omitempty"` // 预约记录
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReserveOrderResp) Reset() {
	*x = GetReserveOrderResp{}
	mi := &file_proto_client_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReserveOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReserveOrderResp) ProtoMessage() {}

func (x *GetReserveOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReserveOrderResp.ProtoReflect.Descriptor instead.
func (*GetReserveOrderResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{38}
}

func (x *GetReserveOrderResp) GetOrder() []*ReserveOrder {
	if x != nil {
		return x.Order
	}
	return nil
}

// 500-1022: 取消预约下注
type ReserveCancelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReserveId     string                 `protobuf:"bytes,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"` //required 预约id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveCancelReq) Reset() {
	*x = ReserveCancelReq{}
	mi := &file_proto_client_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCancelReq) ProtoMessage() {}

func (x *ReserveCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCancelReq.ProtoReflect.Descriptor instead.
func (*ReserveCancelReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{39}
}

func (x *ReserveCancelReq) GetReserveId() string {
	if x != nil {
		return x.ReserveId
	}
	return ""
}

type ReserveCancelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveCancelResp) Reset() {
	*x = ReserveCancelResp{}
	mi := &file_proto_client_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveCancelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveCancelResp) ProtoMessage() {}

func (x *ReserveCancelResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveCancelResp.ProtoReflect.Descriptor instead.
func (*ReserveCancelResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{40}
}

func (x *ReserveCancelResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReserveCancelResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1023: 修改预约下注订单
type ReserveUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReserveId     string                 `protobuf:"bytes,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"` //required 预约id
	Amount        int64                  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`                       //required 新的本金
	Odds          string                 `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`                            //required 新的预约赔率
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveUpdateReq) Reset() {
	*x = ReserveUpdateReq{}
	mi := &file_proto_client_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveUpdateReq) ProtoMessage() {}

func (x *ReserveUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveUpdateReq.ProtoReflect.Descriptor instead.
func (*ReserveUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{41}
}

func (x *ReserveUpdateReq) GetReserveId() string {
	if x != nil {
		return x.ReserveId
	}
	return ""
}

func (x *ReserveUpdateReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ReserveUpdateReq) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

type ReserveUpdateResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveUpdateResp) Reset() {
	*x = ReserveUpdateResp{}
	mi := &file_proto_client_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveUpdateResp) ProtoMessage() {}

func (x *ReserveUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveUpdateResp.ProtoReflect.Descriptor instead.
func (*ReserveUpdateResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{42}
}

func (x *ReserveUpdateResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReserveUpdateResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1030: 搜索
type SearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Word          string                 `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"` //required 搜索词
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchReq) Reset() {
	*x = SearchReq{}
	mi := &file_proto_client_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchReq) ProtoMessage() {}

func (x *SearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchReq.ProtoReflect.Descriptor instead.
func (*SearchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{43}
}

func (x *SearchReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type SearchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tournament    *Tournament            `protobuf:"bytes,1,opt,name=tournament,proto3" json:"tournament,omitempty"` //联赛
	Match         []*MatchBasicInfo      `protobuf:"bytes,2,rep,name=match,proto3" json:"match,omitempty"`           //比赛信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResp) Reset() {
	*x = SearchResp{}
	mi := &file_proto_client_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResp) ProtoMessage() {}

func (x *SearchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResp.ProtoReflect.Descriptor instead.
func (*SearchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{44}
}

func (x *SearchResp) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *SearchResp) GetMatch() []*MatchBasicInfo {
	if x != nil {
		return x.Match
	}
	return nil
}

// 500-1031: 历史搜索词
type SearchHistoryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchHistoryReq) Reset() {
	*x = SearchHistoryReq{}
	mi := &file_proto_client_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHistoryReq) ProtoMessage() {}

func (x *SearchHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHistoryReq.ProtoReflect.Descriptor instead.
func (*SearchHistoryReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{45}
}

type SearchHistoryResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	History       []string               `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"` //历史搜索词
	Hot           []string               `protobuf:"bytes,2,rep,name=hot,proto3" json:"hot,omitempty"`         //热门搜索词
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchHistoryResp) Reset() {
	*x = SearchHistoryResp{}
	mi := &file_proto_client_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchHistoryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchHistoryResp) ProtoMessage() {}

func (x *SearchHistoryResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchHistoryResp.ProtoReflect.Descriptor instead.
func (*SearchHistoryResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{46}
}

func (x *SearchHistoryResp) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *SearchHistoryResp) GetHot() []string {
	if x != nil {
		return x.Hot
	}
	return nil
}

// 500-1032: 搜索自动补充词汇
type SearchRecommendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Word          string                 `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"` //required 搜索词
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRecommendReq) Reset() {
	*x = SearchRecommendReq{}
	mi := &file_proto_client_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRecommendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecommendReq) ProtoMessage() {}

func (x *SearchRecommendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecommendReq.ProtoReflect.Descriptor instead.
func (*SearchRecommendReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{47}
}

func (x *SearchRecommendReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

type SearchRecommendResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recommend     []string               `protobuf:"bytes,1,rep,name=recommend,proto3" json:"recommend,omitempty"` //推荐词
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRecommendResp) Reset() {
	*x = SearchRecommendResp{}
	mi := &file_proto_client_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRecommendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRecommendResp) ProtoMessage() {}

func (x *SearchRecommendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRecommendResp.ProtoReflect.Descriptor instead.
func (*SearchRecommendResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{48}
}

func (x *SearchRecommendResp) GetRecommend() []string {
	if x != nil {
		return x.Recommend
	}
	return nil
}

// 500-1040: 添加收藏
type AddCollectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       []int64                `protobuf:"varint,1,rep,packed,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCollectReq) Reset() {
	*x = AddCollectReq{}
	mi := &file_proto_client_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollectReq) ProtoMessage() {}

func (x *AddCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollectReq.ProtoReflect.Descriptor instead.
func (*AddCollectReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{49}
}

func (x *AddCollectReq) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type AddCollectResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCollectResp) Reset() {
	*x = AddCollectResp{}
	mi := &file_proto_client_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCollectResp) ProtoMessage() {}

func (x *AddCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCollectResp.ProtoReflect.Descriptor instead.
func (*AddCollectResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{50}
}

func (x *AddCollectResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddCollectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1041: 移除收藏
type RemoveCollectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       []int64                `protobuf:"varint,1,rep,packed,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveCollectReq) Reset() {
	*x = RemoveCollectReq{}
	mi := &file_proto_client_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectReq) ProtoMessage() {}

func (x *RemoveCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectReq.ProtoReflect.Descriptor instead.
func (*RemoveCollectReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{51}
}

func (x *RemoveCollectReq) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type RemoveCollectResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveCollectResp) Reset() {
	*x = RemoveCollectResp{}
	mi := &file_proto_client_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCollectResp) ProtoMessage() {}

func (x *RemoveCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCollectResp.ProtoReflect.Descriptor instead.
func (*RemoveCollectResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{52}
}

func (x *RemoveCollectResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveCollectResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1042: 收藏列表
type ListCollectReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // 请求的页数,从1开始
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"` // 每页显示数量,最大50
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCollectReq) Reset() {
	*x = ListCollectReq{}
	mi := &file_proto_client_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCollectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectReq) ProtoMessage() {}

func (x *ListCollectReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectReq.ProtoReflect.Descriptor instead.
func (*ListCollectReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{53}
}

func (x *ListCollectReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCollectReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListCollectResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Match         []*Match               `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`  //比赛
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 总比赛数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCollectResp) Reset() {
	*x = ListCollectResp{}
	mi := &file_proto_client_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCollectResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCollectResp) ProtoMessage() {}

func (x *ListCollectResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCollectResp.ProtoReflect.Descriptor instead.
func (*ListCollectResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{54}
}

func (x *ListCollectResp) GetMatch() []*Match {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *ListCollectResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 500-1050: 获取系统设置
type GetSettingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingReq) Reset() {
	*x = GetSettingReq{}
	mi := &file_proto_client_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingReq) ProtoMessage() {}

func (x *GetSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingReq.ProtoReflect.Descriptor instead.
func (*GetSettingReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{55}
}

type GetSettingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Setting       *Setting               `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingResp) Reset() {
	*x = GetSettingResp{}
	mi := &file_proto_client_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResp) ProtoMessage() {}

func (x *GetSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResp.ProtoReflect.Descriptor instead.
func (*GetSettingResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{56}
}

func (x *GetSettingResp) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// 500-1051: 修改系统设置
type UpdateSettingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Setting       *Setting               `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"` //
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingReq) Reset() {
	*x = UpdateSettingReq{}
	mi := &file_proto_client_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingReq) ProtoMessage() {}

func (x *UpdateSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingReq.ProtoReflect.Descriptor instead.
func (*UpdateSettingReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{57}
}

func (x *UpdateSettingReq) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

type UpdateSettingResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingResp) Reset() {
	*x = UpdateSettingResp{}
	mi := &file_proto_client_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingResp) ProtoMessage() {}

func (x *UpdateSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingResp.ProtoReflect.Descriptor instead.
func (*UpdateSettingResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateSettingResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 500-1100: 订阅比赛
type SubscribeMatchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       []int64                `protobuf:"varint,1,rep,packed,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	Simple        bool                   `protobuf:"varint,2,opt,name=simple,proto3" json:"simple,omitempty"`                         //true - 只推送3个热门比赛盘口   false - 推送所有比赛盘口
	Replace       bool                   `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`                       //true - 删除之前的所有订阅  false - 不删除之前的订阅
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMatchReq) Reset() {
	*x = SubscribeMatchReq{}
	mi := &file_proto_client_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMatchReq) ProtoMessage() {}

func (x *SubscribeMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMatchReq.ProtoReflect.Descriptor instead.
func (*SubscribeMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{59}
}

func (x *SubscribeMatchReq) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

func (x *SubscribeMatchReq) GetSimple() bool {
	if x != nil {
		return x.Simple
	}
	return false
}

func (x *SubscribeMatchReq) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type SubscribeMatchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMatchResp) Reset() {
	*x = SubscribeMatchResp{}
	mi := &file_proto_client_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMatchResp) ProtoMessage() {}

func (x *SubscribeMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMatchResp.ProtoReflect.Descriptor instead.
func (*SubscribeMatchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{60}
}

func (x *SubscribeMatchResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubscribeMatchResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 500-1101: 取消订阅比赛
type CancelSubscribeMatchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       []int64                `protobuf:"varint,1,rep,packed,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelSubscribeMatchReq) Reset() {
	*x = CancelSubscribeMatchReq{}
	mi := &file_proto_client_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSubscribeMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubscribeMatchReq) ProtoMessage() {}

func (x *CancelSubscribeMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubscribeMatchReq.ProtoReflect.Descriptor instead.
func (*CancelSubscribeMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{61}
}

func (x *CancelSubscribeMatchReq) GetMatchId() []int64 {
	if x != nil {
		return x.MatchId
	}
	return nil
}

type CancelSubscribeMatchResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelSubscribeMatchResp) Reset() {
	*x = CancelSubscribeMatchResp{}
	mi := &file_proto_client_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSubscribeMatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubscribeMatchResp) ProtoMessage() {}

func (x *CancelSubscribeMatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubscribeMatchResp.ProtoReflect.Descriptor instead.
func (*CancelSubscribeMatchResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{62}
}

func (x *CancelSubscribeMatchResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelSubscribeMatchResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 600-1000: 比赛推送
type MatchNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //比赛id
	BasicUpdate   *MatchBasicUpdate      `protobuf:"bytes,2,opt,name=basic_update,json=basicUpdate,proto3" json:"basic_update,omitempty"`
	MarketUpdate  *MatchMarketUpdate     `protobuf:"bytes,3,opt,name=market_update,json=marketUpdate,proto3" json:"market_update,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchNotify) Reset() {
	*x = MatchNotify{}
	mi := &file_proto_client_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchNotify) ProtoMessage() {}

func (x *MatchNotify) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchNotify.ProtoReflect.Descriptor instead.
func (*MatchNotify) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{63}
}

func (x *MatchNotify) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchNotify) GetBasicUpdate() *MatchBasicUpdate {
	if x != nil {
		return x.BasicUpdate
	}
	return nil
}

func (x *MatchNotify) GetMarketUpdate() *MatchMarketUpdate {
	if x != nil {
		return x.MarketUpdate
	}
	return nil
}

// 比赛基本信息
type MatchBasicUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                        //比赛状态 0-已结束 1-推迟 2-中断 3-取消 4-未开赛 5-进行中 6-延迟 7-废弃 8-暂停
	BetStop       bool                   `protobuf:"varint,2,opt,name=bet_stop,json=betStop,proto3" json:"bet_stop,omitempty"`       // false: 未停止投注, true: 已停止投注
	LiveInfo      *MatchLiveInfo         `protobuf:"bytes,3,opt,name=live_info,json=liveInfo,proto3" json:"live_info,omitempty"`     //比赛实时信息
	StartTime     int64                  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` //开始时间,13位时间戳
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchBasicUpdate) Reset() {
	*x = MatchBasicUpdate{}
	mi := &file_proto_client_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBasicUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBasicUpdate) ProtoMessage() {}

func (x *MatchBasicUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBasicUpdate.ProtoReflect.Descriptor instead.
func (*MatchBasicUpdate) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{64}
}

func (x *MatchBasicUpdate) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchBasicUpdate) GetBetStop() bool {
	if x != nil {
		return x.BetStop
	}
	return false
}

func (x *MatchBasicUpdate) GetLiveInfo() *MatchLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *MatchBasicUpdate) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 比赛盘口变化
type MatchMarketUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Market        []*Market              `protobuf:"bytes,1,rep,name=market,proto3" json:"market,omitempty"` //只推送有变化的盘口
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchMarketUpdate) Reset() {
	*x = MatchMarketUpdate{}
	mi := &file_proto_client_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchMarketUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMarketUpdate) ProtoMessage() {}

func (x *MatchMarketUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMarketUpdate.ProtoReflect.Descriptor instead.
func (*MatchMarketUpdate) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{65}
}

func (x *MatchMarketUpdate) GetMarket() []*Market {
	if x != nil {
		return x.Market
	}
	return nil
}

// 600-1001: 订单状态推送
type OrderStatusNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderStatus   []*OrderStatus         `protobuf:"bytes,1,rep,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderStatusNotify) Reset() {
	*x = OrderStatusNotify{}
	mi := &file_proto_client_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatusNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusNotify) ProtoMessage() {}

func (x *OrderStatusNotify) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusNotify.ProtoReflect.Descriptor instead.
func (*OrderStatusNotify) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{66}
}

func (x *OrderStatusNotify) GetOrderStatus() []*OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return nil
}

// 600-1002: 订单余额推送
type BalanceNotify struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       string                 `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"` //余额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceNotify) Reset() {
	*x = BalanceNotify{}
	mi := &file_proto_client_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceNotify) ProtoMessage() {}

func (x *BalanceNotify) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceNotify.ProtoReflect.Descriptor instead.
func (*BalanceNotify) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{67}
}

func (x *BalanceNotify) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type OrderStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderId       string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` //2-拒单 4-接单成功
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderStatus) Reset() {
	*x = OrderStatus{}
	mi := &file_proto_client_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatus) ProtoMessage() {}

func (x *OrderStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatus.ProtoReflect.Descriptor instead.
func (*OrderStatus) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{68}
}

func (x *OrderStatus) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 700-2001: 比赛统计数据
type MatchLiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveReq) Reset() {
	*x = MatchLiveReq{}
	mi := &file_proto_client_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveReq) ProtoMessage() {}

func (x *MatchLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveReq.ProtoReflect.Descriptor instead.
func (*MatchLiveReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{69}
}

func (x *MatchLiveReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MatchLiveResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchLiveData *MatchLiveData         `protobuf:"bytes,1,opt,name=match_live_data,json=matchLiveData,proto3" json:"match_live_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveResp) Reset() {
	*x = MatchLiveResp{}
	mi := &file_proto_client_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveResp) ProtoMessage() {}

func (x *MatchLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveResp.ProtoReflect.Descriptor instead.
func (*MatchLiveResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{70}
}

func (x *MatchLiveResp) GetMatchLiveData() *MatchLiveData {
	if x != nil {
		return x.MatchLiveData
	}
	return nil
}

// 700-2002: 比赛阵容数据
type MatchLineupReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLineupReq) Reset() {
	*x = MatchLineupReq{}
	mi := &file_proto_client_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLineupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineupReq) ProtoMessage() {}

func (x *MatchLineupReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineupReq.ProtoReflect.Descriptor instead.
func (*MatchLineupReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{71}
}

func (x *MatchLineupReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MatchLineupResp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MatchLineupDetail *MatchLineupDetail     `protobuf:"bytes,1,opt,name=match_lineup_detail,json=matchLineupDetail,proto3" json:"match_lineup_detail,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MatchLineupResp) Reset() {
	*x = MatchLineupResp{}
	mi := &file_proto_client_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLineupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLineupResp) ProtoMessage() {}

func (x *MatchLineupResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLineupResp.ProtoReflect.Descriptor instead.
func (*MatchLineupResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{72}
}

func (x *MatchLineupResp) GetMatchLineupDetail() *MatchLineupDetail {
	if x != nil {
		return x.MatchLineupDetail
	}
	return nil
}

// 700-2003: 赛事积分榜数据
type CompetitionTableReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CompId        int32                  `protobuf:"varint,1,opt,name=comp_id,json=compId,proto3" json:"comp_id,omitempty"` //required 赛事id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompetitionTableReq) Reset() {
	*x = CompetitionTableReq{}
	mi := &file_proto_client_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitionTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionTableReq) ProtoMessage() {}

func (x *CompetitionTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionTableReq.ProtoReflect.Descriptor instead.
func (*CompetitionTableReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{73}
}

func (x *CompetitionTableReq) GetCompId() int32 {
	if x != nil {
		return x.CompId
	}
	return 0
}

type CompetitionTableResp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CompetitionTables *CompetitionTables     `protobuf:"bytes,1,opt,name=competition_tables,json=competitionTables,proto3" json:"competition_tables,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompetitionTableResp) Reset() {
	*x = CompetitionTableResp{}
	mi := &file_proto_client_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitionTableResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionTableResp) ProtoMessage() {}

func (x *CompetitionTableResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionTableResp.ProtoReflect.Descriptor instead.
func (*CompetitionTableResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{74}
}

func (x *CompetitionTableResp) GetCompetitionTables() *CompetitionTables {
	if x != nil {
		return x.CompetitionTables
	}
	return nil
}

// 700-2004: 比赛趋势数据
type MatchTrendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchTrendReq) Reset() {
	*x = MatchTrendReq{}
	mi := &file_proto_client_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchTrendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrendReq) ProtoMessage() {}

func (x *MatchTrendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrendReq.ProtoReflect.Descriptor instead.
func (*MatchTrendReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{75}
}

func (x *MatchTrendReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MatchTrendResp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MatchTrendData *MatchTrendData        `protobuf:"bytes,1,opt,name=match_trend_data,json=matchTrendData,proto3" json:"match_trend_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MatchTrendResp) Reset() {
	*x = MatchTrendResp{}
	mi := &file_proto_client_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchTrendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTrendResp) ProtoMessage() {}

func (x *MatchTrendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTrendResp.ProtoReflect.Descriptor instead.
func (*MatchTrendResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{76}
}

func (x *MatchTrendResp) GetMatchTrendData() *MatchTrendData {
	if x != nil {
		return x.MatchTrendData
	}
	return nil
}

// 700-1100: 比赛统计数据推送
type SubscribeMatchLiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id  -1：取消订阅
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMatchLiveReq) Reset() {
	*x = SubscribeMatchLiveReq{}
	mi := &file_proto_client_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMatchLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMatchLiveReq) ProtoMessage() {}

func (x *SubscribeMatchLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMatchLiveReq.ProtoReflect.Descriptor instead.
func (*SubscribeMatchLiveReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{77}
}

func (x *SubscribeMatchLiveReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type SubscribeMatchLiveResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchLiveData *MatchLiveData         `protobuf:"bytes,1,opt,name=match_live_data,json=matchLiveData,proto3" json:"match_live_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMatchLiveResp) Reset() {
	*x = SubscribeMatchLiveResp{}
	mi := &file_proto_client_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMatchLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMatchLiveResp) ProtoMessage() {}

func (x *SubscribeMatchLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMatchLiveResp.ProtoReflect.Descriptor instead.
func (*SubscribeMatchLiveResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{78}
}

func (x *SubscribeMatchLiveResp) GetMatchLiveData() *MatchLiveData {
	if x != nil {
		return x.MatchLiveData
	}
	return nil
}

// 700-2005: 比赛直播流
type MatchLiveStreamReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveStreamReq) Reset() {
	*x = MatchLiveStreamReq{}
	mi := &file_proto_client_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveStreamReq) ProtoMessage() {}

func (x *MatchLiveStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveStreamReq.ProtoReflect.Descriptor instead.
func (*MatchLiveStreamReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{79}
}

func (x *MatchLiveStreamReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MatchLiveStreamResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	Streams       []*MatchLiveStream     `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`                 //视频流列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveStreamResp) Reset() {
	*x = MatchLiveStreamResp{}
	mi := &file_proto_client_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveStreamResp) ProtoMessage() {}

func (x *MatchLiveStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveStreamResp.ProtoReflect.Descriptor instead.
func (*MatchLiveStreamResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{80}
}

func (x *MatchLiveStreamResp) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchLiveStreamResp) GetStreams() []*MatchLiveStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

// 700-2006: 比赛动画直播URL
type MatchAnimationLiveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchAnimationLiveReq) Reset() {
	*x = MatchAnimationLiveReq{}
	mi := &file_proto_client_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchAnimationLiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAnimationLiveReq) ProtoMessage() {}

func (x *MatchAnimationLiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAnimationLiveReq.ProtoReflect.Descriptor instead.
func (*MatchAnimationLiveReq) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{81}
}

func (x *MatchAnimationLiveReq) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

type MatchAnimationLiveResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int32                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` //required 比赛id
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                         // iframeUrl
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchAnimationLiveResp) Reset() {
	*x = MatchAnimationLiveResp{}
	mi := &file_proto_client_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchAnimationLiveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAnimationLiveResp) ProtoMessage() {}

func (x *MatchAnimationLiveResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_client_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAnimationLiveResp.ProtoReflect.Descriptor instead.
func (*MatchAnimationLiveResp) Descriptor() ([]byte, []int) {
	return file_proto_client_proto_rawDescGZIP(), []int{82}
}

func (x *MatchAnimationLiveResp) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchAnimationLiveResp) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_proto_client_proto protoreflect.FileDescriptor

var file_proto_client_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe6, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x64, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x0b, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x22, 0x21, 0x0a, 0x0b,
	0x50, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x10, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x22, 0x5d, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x61, 0x6c, 0x61,
	0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x22, 0x99, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x55, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x57, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x28, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x41, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78,
	0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x22, 0x61, 0x0a, 0x12, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x13, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x22, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0x51, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0c,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xab,
	0x01, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x77, 0x0a, 0x0e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61,
	0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x62, 0x65, 0x74,
	0x12, 0x33, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x05,
	0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x42, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0e, 0x45, 0x61, 0x72, 0x6c, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x0f, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x56, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x54, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x36, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42,
	0x65, 0x74, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x22, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x42,
	0x65, 0x74, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x22, 0x2c, 0x0a, 0x13, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3b,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x03,
	0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6c, 0x61,
	0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1f,
	0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x22, 0x3f,
	0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x22,
	0x28, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x22, 0x2a,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2d, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0x47, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x59, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x0f, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22, 0x48,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x36, 0x0a, 0x07,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x60, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x34, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x3f, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x58, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x43,
	0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x40,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x29, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x2e, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x64,
	0x22, 0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22,
	0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x0e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a,
	0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x32, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x64, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6c,
	0x61, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x70, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_client_proto_rawDescOnce sync.Once
	file_proto_client_proto_rawDescData []byte
)

func file_proto_client_proto_rawDescGZIP() []byte {
	file_proto_client_proto_rawDescOnce.Do(func() {
		file_proto_client_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_client_proto_rawDesc), len(file_proto_client_proto_rawDesc)))
	})
	return file_proto_client_proto_rawDescData
}

var file_proto_client_proto_msgTypes = make([]protoimpl.MessageInfo, 83)
var file_proto_client_proto_goTypes = []any{
	(*LoginReq)(nil),                 // 0: galaxy.client.proto.LoginReq
	(*LoginResp)(nil),                // 1: galaxy.client.proto.LoginResp
	(*ChangeLangReq)(nil),            // 2: galaxy.client.proto.ChangeLangReq
	(*LogoutReq)(nil),                // 3: galaxy.client.proto.LogoutReq
	(*PingBackReq)(nil),              // 4: galaxy.client.proto.PingBackReq
	(*StatisticalReq)(nil),           // 5: galaxy.client.proto.StatisticalReq
	(*StatisticalResp)(nil),          // 6: galaxy.client.proto.StatisticalResp
	(*ListTournamentReq)(nil),        // 7: galaxy.client.proto.ListTournamentReq
	(*ListTournamentResp)(nil),       // 8: galaxy.client.proto.ListTournamentResp
	(*ListMatchReq)(nil),             // 9: galaxy.client.proto.ListMatchReq
	(*ListMatchResp)(nil),            // 10: galaxy.client.proto.ListMatchResp
	(*GetMatchReq)(nil),              // 11: galaxy.client.proto.GetMatchReq
	(*GetMatchResp)(nil),             // 12: galaxy.client.proto.GetMatchResp
	(*ListSportReq)(nil),             // 13: galaxy.client.proto.ListSportReq
	(*ListSportResp)(nil),            // 14: galaxy.client.proto.ListSportResp
	(*BalanceReq)(nil),               // 15: galaxy.client.proto.BalanceReq
	(*TournamentMatchReq)(nil),       // 16: galaxy.client.proto.TournamentMatchReq
	(*TournamentMatchResp)(nil),      // 17: galaxy.client.proto.TournamentMatchResp
	(*MarketTypeReq)(nil),            // 18: galaxy.client.proto.MarketTypeReq
	(*MarketTypeResp)(nil),           // 19: galaxy.client.proto.MarketTypeResp
	(*BalanceResp)(nil),              // 20: galaxy.client.proto.BalanceResp
	(*SingleBetReq)(nil),             // 21: galaxy.client.proto.SingleBetReq
	(*SingleBetResp)(nil),            // 22: galaxy.client.proto.SingleBetResp
	(*MultipleBetReq)(nil),           // 23: galaxy.client.proto.MultipleBetReq
	(*MultipleBetResp)(nil),          // 24: galaxy.client.proto.MultipleBetResp
	(*EarlySettleReq)(nil),           // 25: galaxy.client.proto.EarlySettleReq
	(*EarlySettleResp)(nil),          // 26: galaxy.client.proto.EarlySettleResp
	(*GetOrderReq)(nil),              // 27: galaxy.client.proto.GetOrderReq
	(*GetOrderResp)(nil),             // 28: galaxy.client.proto.GetOrderResp
	(*GetSingleRiskReq)(nil),         // 29: galaxy.client.proto.GetSingleRiskReq
	(*GetSingleRiskResp)(nil),        // 30: galaxy.client.proto.GetSingleRiskResp
	(*GetComboRiskReq)(nil),          // 31: galaxy.client.proto.GetComboRiskReq
	(*GetComboRiskResp)(nil),         // 32: galaxy.client.proto.GetComboRiskResp
	(*EarlySettlePriceReq)(nil),      // 33: galaxy.client.proto.EarlySettlePriceReq
	(*EarlySettlePriceResp)(nil),     // 34: galaxy.client.proto.EarlySettlePriceResp
	(*ReserveBetReq)(nil),            // 35: galaxy.client.proto.ReserveBetReq
	(*ReserveBetResp)(nil),           // 36: galaxy.client.proto.ReserveBetResp
	(*GetReserveOrderReq)(nil),       // 37: galaxy.client.proto.GetReserveOrderReq
	(*GetReserveOrderResp)(nil),      // 38: galaxy.client.proto.GetReserveOrderResp
	(*ReserveCancelReq)(nil),         // 39: galaxy.client.proto.ReserveCancelReq
	(*ReserveCancelResp)(nil),        // 40: galaxy.client.proto.ReserveCancelResp
	(*ReserveUpdateReq)(nil),         // 41: galaxy.client.proto.ReserveUpdateReq
	(*ReserveUpdateResp)(nil),        // 42: galaxy.client.proto.ReserveUpdateResp
	(*SearchReq)(nil),                // 43: galaxy.client.proto.SearchReq
	(*SearchResp)(nil),               // 44: galaxy.client.proto.SearchResp
	(*SearchHistoryReq)(nil),         // 45: galaxy.client.proto.SearchHistoryReq
	(*SearchHistoryResp)(nil),        // 46: galaxy.client.proto.SearchHistoryResp
	(*SearchRecommendReq)(nil),       // 47: galaxy.client.proto.SearchRecommendReq
	(*SearchRecommendResp)(nil),      // 48: galaxy.client.proto.SearchRecommendResp
	(*AddCollectReq)(nil),            // 49: galaxy.client.proto.AddCollectReq
	(*AddCollectResp)(nil),           // 50: galaxy.client.proto.AddCollectResp
	(*RemoveCollectReq)(nil),         // 51: galaxy.client.proto.RemoveCollectReq
	(*RemoveCollectResp)(nil),        // 52: galaxy.client.proto.RemoveCollectResp
	(*ListCollectReq)(nil),           // 53: galaxy.client.proto.ListCollectReq
	(*ListCollectResp)(nil),          // 54: galaxy.client.proto.ListCollectResp
	(*GetSettingReq)(nil),            // 55: galaxy.client.proto.GetSettingReq
	(*GetSettingResp)(nil),           // 56: galaxy.client.proto.GetSettingResp
	(*UpdateSettingReq)(nil),         // 57: galaxy.client.proto.UpdateSettingReq
	(*UpdateSettingResp)(nil),        // 58: galaxy.client.proto.UpdateSettingResp
	(*SubscribeMatchReq)(nil),        // 59: galaxy.client.proto.SubscribeMatchReq
	(*SubscribeMatchResp)(nil),       // 60: galaxy.client.proto.SubscribeMatchResp
	(*CancelSubscribeMatchReq)(nil),  // 61: galaxy.client.proto.CancelSubscribeMatchReq
	(*CancelSubscribeMatchResp)(nil), // 62: galaxy.client.proto.CancelSubscribeMatchResp
	(*MatchNotify)(nil),              // 63: galaxy.client.proto.MatchNotify
	(*MatchBasicUpdate)(nil),         // 64: galaxy.client.proto.MatchBasicUpdate
	(*MatchMarketUpdate)(nil),        // 65: galaxy.client.proto.MatchMarketUpdate
	(*OrderStatusNotify)(nil),        // 66: galaxy.client.proto.OrderStatusNotify
	(*BalanceNotify)(nil),            // 67: galaxy.client.proto.BalanceNotify
	(*OrderStatus)(nil),              // 68: galaxy.client.proto.OrderStatus
	(*MatchLiveReq)(nil),             // 69: galaxy.client.proto.MatchLiveReq
	(*MatchLiveResp)(nil),            // 70: galaxy.client.proto.MatchLiveResp
	(*MatchLineupReq)(nil),           // 71: galaxy.client.proto.MatchLineupReq
	(*MatchLineupResp)(nil),          // 72: galaxy.client.proto.MatchLineupResp
	(*CompetitionTableReq)(nil),      // 73: galaxy.client.proto.CompetitionTableReq
	(*CompetitionTableResp)(nil),     // 74: galaxy.client.proto.CompetitionTableResp
	(*MatchTrendReq)(nil),            // 75: galaxy.client.proto.MatchTrendReq
	(*MatchTrendResp)(nil),           // 76: galaxy.client.proto.MatchTrendResp
	(*SubscribeMatchLiveReq)(nil),    // 77: galaxy.client.proto.SubscribeMatchLiveReq
	(*SubscribeMatchLiveResp)(nil),   // 78: galaxy.client.proto.SubscribeMatchLiveResp
	(*MatchLiveStreamReq)(nil),       // 79: galaxy.client.proto.MatchLiveStreamReq
	(*MatchLiveStreamResp)(nil),      // 80: galaxy.client.proto.MatchLiveStreamResp
	(*MatchAnimationLiveReq)(nil),    // 81: galaxy.client.proto.MatchAnimationLiveReq
	(*MatchAnimationLiveResp)(nil),   // 82: galaxy.client.proto.MatchAnimationLiveResp
	(*PlayTypeStatistical)(nil),      // 83: galaxy.common.proto.PlayTypeStatistical
	(*Tournament)(nil),               // 84: galaxy.common.proto.Tournament
	(*Match)(nil),                    // 85: galaxy.common.proto.Match
	(*Sport)(nil),                    // 86: galaxy.common.proto.Sport
	(*MarketType)(nil),               // 87: galaxy.common.proto.MarketType
	(*BetOption)(nil),                // 88: galaxy.common.proto.BetOption
	(*BetCombo)(nil),                 // 89: galaxy.common.proto.BetCombo
	(*PlaceBetInfo)(nil),             // 90: galaxy.common.proto.PlaceBetInfo
	(*Order)(nil),                    // 91: galaxy.common.proto.Order
	(*RiskSelection)(nil),            // 92: galaxy.common.proto.RiskSelection
	(*RiskSingleBet)(nil),            // 93: galaxy.common.proto.RiskSingleBet
	(*RiskComboBet)(nil),             // 94: galaxy.common.proto.RiskComboBet
	(*EarlySettlePrice)(nil),         // 95: galaxy.common.proto.EarlySettlePrice
	(*ReserveOrder)(nil),             // 96: galaxy.common.proto.ReserveOrder
	(*MatchBasicInfo)(nil),           // 97: galaxy.common.proto.MatchBasicInfo
	(*Setting)(nil),                  // 98: galaxy.common.proto.Setting
	(*MatchLiveInfo)(nil),            // 99: galaxy.common.proto.MatchLiveInfo
	(*Market)(nil),                   // 100: galaxy.common.proto.Market
	(*MatchLiveData)(nil),            // 101: galaxy.client.proto.MatchLiveData
	(*MatchLineupDetail)(nil),        // 102: galaxy.client.proto.MatchLineupDetail
	(*CompetitionTables)(nil),        // 103: galaxy.client.proto.CompetitionTables
	(*MatchTrendData)(nil),           // 104: galaxy.client.proto.MatchTrendData
	(*MatchLiveStream)(nil),          // 105: galaxy.client.proto.MatchLiveStream
}
var file_proto_client_proto_depIdxs = []int32{
	83,  // 0: galaxy.client.proto.StatisticalResp.statistical:type_name -> galaxy.common.proto.PlayTypeStatistical
	84,  // 1: galaxy.client.proto.ListTournamentResp.tournament:type_name -> galaxy.common.proto.Tournament
	85,  // 2: galaxy.client.proto.ListMatchResp.match:type_name -> galaxy.common.proto.Match
	85,  // 3: galaxy.client.proto.GetMatchResp.match:type_name -> galaxy.common.proto.Match
	86,  // 4: galaxy.client.proto.ListSportResp.sport:type_name -> galaxy.common.proto.Sport
	85,  // 5: galaxy.client.proto.TournamentMatchResp.match:type_name -> galaxy.common.proto.Match
	87,  // 6: galaxy.client.proto.MarketTypeResp.marketType:type_name -> galaxy.common.proto.MarketType
	88,  // 7: galaxy.client.proto.MultipleBetReq.bet:type_name -> galaxy.common.proto.BetOption
	89,  // 8: galaxy.client.proto.MultipleBetReq.combo:type_name -> galaxy.common.proto.BetCombo
	90,  // 9: galaxy.client.proto.MultipleBetResp.place_bet_info:type_name -> galaxy.common.proto.PlaceBetInfo
	91,  // 10: galaxy.client.proto.GetOrderResp.order:type_name -> galaxy.common.proto.Order
	92,  // 11: galaxy.client.proto.GetSingleRiskReq.selection:type_name -> galaxy.common.proto.RiskSelection
	93,  // 12: galaxy.client.proto.GetSingleRiskResp.risk:type_name -> galaxy.common.proto.RiskSingleBet
	92,  // 13: galaxy.client.proto.GetComboRiskReq.selection:type_name -> galaxy.common.proto.RiskSelection
	94,  // 14: galaxy.client.proto.GetComboRiskResp.risk:type_name -> galaxy.common.proto.RiskComboBet
	95,  // 15: galaxy.client.proto.EarlySettlePriceResp.price:type_name -> galaxy.common.proto.EarlySettlePrice
	88,  // 16: galaxy.client.proto.ReserveBetReq.bet:type_name -> galaxy.common.proto.BetOption
	96,  // 17: galaxy.client.proto.GetReserveOrderResp.order:type_name -> galaxy.common.proto.ReserveOrder
	84,  // 18: galaxy.client.proto.SearchResp.tournament:type_name -> galaxy.common.proto.Tournament
	97,  // 19: galaxy.client.proto.SearchResp.match:type_name -> galaxy.common.proto.MatchBasicInfo
	85,  // 20: galaxy.client.proto.ListCollectResp.match:type_name -> galaxy.common.proto.Match
	98,  // 21: galaxy.client.proto.GetSettingResp.setting:type_name -> galaxy.common.proto.Setting
	98,  // 22: galaxy.client.proto.UpdateSettingReq.setting:type_name -> galaxy.common.proto.Setting
	64,  // 23: galaxy.client.proto.MatchNotify.basic_update:type_name -> galaxy.client.proto.MatchBasicUpdate
	65,  // 24: galaxy.client.proto.MatchNotify.market_update:type_name -> galaxy.client.proto.MatchMarketUpdate
	99,  // 25: galaxy.client.proto.MatchBasicUpdate.live_info:type_name -> galaxy.common.proto.MatchLiveInfo
	100, // 26: galaxy.client.proto.MatchMarketUpdate.market:type_name -> galaxy.common.proto.Market
	68,  // 27: galaxy.client.proto.OrderStatusNotify.order_status:type_name -> galaxy.client.proto.OrderStatus
	101, // 28: galaxy.client.proto.MatchLiveResp.match_live_data:type_name -> galaxy.client.proto.MatchLiveData
	102, // 29: galaxy.client.proto.MatchLineupResp.match_lineup_detail:type_name -> galaxy.client.proto.MatchLineupDetail
	103, // 30: galaxy.client.proto.CompetitionTableResp.competition_tables:type_name -> galaxy.client.proto.CompetitionTables
	104, // 31: galaxy.client.proto.MatchTrendResp.match_trend_data:type_name -> galaxy.client.proto.MatchTrendData
	101, // 32: galaxy.client.proto.SubscribeMatchLiveResp.match_live_data:type_name -> galaxy.client.proto.MatchLiveData
	105, // 33: galaxy.client.proto.MatchLiveStreamResp.streams:type_name -> galaxy.client.proto.MatchLiveStream
	34,  // [34:34] is the sub-list for method output_type
	34,  // [34:34] is the sub-list for method input_type
	34,  // [34:34] is the sub-list for extension type_name
	34,  // [34:34] is the sub-list for extension extendee
	0,   // [0:34] is the sub-list for field type_name
}

func init() { file_proto_client_proto_init() }
func file_proto_client_proto_init() {
	if File_proto_client_proto != nil {
		return
	}
	file_proto_common_proto_init()
	file_proto_sloth_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_client_proto_rawDesc), len(file_proto_client_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   83,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_client_proto_goTypes,
		DependencyIndexes: file_proto_client_proto_depIdxs,
		MessageInfos:      file_proto_client_proto_msgTypes,
	}.Build()
	File_proto_client_proto = out.File
	file_proto_client_proto_goTypes = nil
	file_proto_client_proto_depIdxs = nil
}
