// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: proto/common.proto

package api_gateway

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 比赛
type Match struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`      //比赛id
	Collect       bool                   `protobuf:"varint,2,opt,name=collect,proto3" json:"collect,omitempty"`                     //用户是否收藏
	BasicInfo     *MatchBasicInfo        `protobuf:"bytes,3,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"` //比赛基本信息
	Market        []*Market              `protobuf:"bytes,4,rep,name=market,proto3" json:"market,omitempty"`                        // 所有的选择和赔率
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Match) Reset() {
	*x = Match{}
	mi := &file_proto_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{0}
}

func (x *Match) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *Match) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *Match) GetBasicInfo() *MatchBasicInfo {
	if x != nil {
		return x.BasicInfo
	}
	return nil
}

func (x *Match) GetMarket() []*Market {
	if x != nil {
		return x.Market
	}
	return nil
}

// 比赛基本信息
type MatchBasicInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MatchId             int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                      //比赛id
	MatchName           string                 `protobuf:"bytes,2,opt,name=match_name,json=matchName,proto3" json:"match_name,omitempty"`                 //比赛名称
	HomeTeam            string                 `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`                    //主队名称
	HomeTeamId          int32                  `protobuf:"varint,4,opt,name=home_team_id,json=homeTeamId,proto3" json:"home_team_id,omitempty"`           //主队id
	HomeTeamIcon        string                 `protobuf:"bytes,5,opt,name=home_team_icon,json=homeTeamIcon,proto3" json:"home_team_icon,omitempty"`      //主队icon
	AwayTeam            string                 `protobuf:"bytes,6,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`                    //客队名称
	AwayTeamId          int32                  `protobuf:"varint,7,opt,name=away_team_id,json=awayTeamId,proto3" json:"away_team_id,omitempty"`           //客队id
	AwayTeamIcon        string                 `protobuf:"bytes,8,opt,name=away_team_icon,json=awayTeamIcon,proto3" json:"away_team_icon,omitempty"`      //客队icon
	StartTime           int64                  `protobuf:"varint,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                //开始时间,13位时间戳
	Status              int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                      //比赛状态 0-已结束 1-推迟 2-中断 3-取消 4-未开赛 5-进行中 6-延迟 7-废弃 8-暂停
	TournamentId        int32                  `protobuf:"varint,11,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`      //联赛id
	TournamentName      string                 `protobuf:"bytes,12,opt,name=tournament_name,json=tournamentName,proto3" json:"tournament_name,omitempty"` //联赛
	TournamentShortName string                 `protobuf:"bytes,13,opt,name=tournament_short_name,json=tournamentShortName,proto3" json:"tournament_short_name,omitempty"`
	TournamentIcon      string                 `protobuf:"bytes,14,opt,name=tournament_icon,json=tournamentIcon,proto3" json:"tournament_icon,omitempty"`        //联赛icon
	SportId             int32                  `protobuf:"varint,15,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`                            //球类
	SportName           string                 `protobuf:"bytes,16,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`                       //球类
	LiveInfo            *MatchLiveInfo         `protobuf:"bytes,17,opt,name=live_info,json=liveInfo,proto3" json:"live_info,omitempty"`                          //比赛实时信息
	BetStop             bool                   `protobuf:"varint,18,opt,name=bet_stop,json=betStop,proto3" json:"bet_stop,omitempty"`                            // false: 未停止投注, true: 已停止投注
	TournamentHot       bool                   `protobuf:"varint,19,opt,name=tournament_hot,json=tournamentHot,proto3" json:"tournament_hot,omitempty"`          //是否热门联赛
	TournamentWeight    int32                  `protobuf:"varint,20,opt,name=tournament_weight,json=tournamentWeight,proto3" json:"tournament_weight,omitempty"` //联赛权重
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MatchBasicInfo) Reset() {
	*x = MatchBasicInfo{}
	mi := &file_proto_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchBasicInfo) ProtoMessage() {}

func (x *MatchBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchBasicInfo.ProtoReflect.Descriptor instead.
func (*MatchBasicInfo) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{1}
}

func (x *MatchBasicInfo) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *MatchBasicInfo) GetMatchName() string {
	if x != nil {
		return x.MatchName
	}
	return ""
}

func (x *MatchBasicInfo) GetHomeTeam() string {
	if x != nil {
		return x.HomeTeam
	}
	return ""
}

func (x *MatchBasicInfo) GetHomeTeamId() int32 {
	if x != nil {
		return x.HomeTeamId
	}
	return 0
}

func (x *MatchBasicInfo) GetHomeTeamIcon() string {
	if x != nil {
		return x.HomeTeamIcon
	}
	return ""
}

func (x *MatchBasicInfo) GetAwayTeam() string {
	if x != nil {
		return x.AwayTeam
	}
	return ""
}

func (x *MatchBasicInfo) GetAwayTeamId() int32 {
	if x != nil {
		return x.AwayTeamId
	}
	return 0
}

func (x *MatchBasicInfo) GetAwayTeamIcon() string {
	if x != nil {
		return x.AwayTeamIcon
	}
	return ""
}

func (x *MatchBasicInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MatchBasicInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchBasicInfo) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *MatchBasicInfo) GetTournamentName() string {
	if x != nil {
		return x.TournamentName
	}
	return ""
}

func (x *MatchBasicInfo) GetTournamentShortName() string {
	if x != nil {
		return x.TournamentShortName
	}
	return ""
}

func (x *MatchBasicInfo) GetTournamentIcon() string {
	if x != nil {
		return x.TournamentIcon
	}
	return ""
}

func (x *MatchBasicInfo) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *MatchBasicInfo) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *MatchBasicInfo) GetLiveInfo() *MatchLiveInfo {
	if x != nil {
		return x.LiveInfo
	}
	return nil
}

func (x *MatchBasicInfo) GetBetStop() bool {
	if x != nil {
		return x.BetStop
	}
	return false
}

func (x *MatchBasicInfo) GetTournamentHot() bool {
	if x != nil {
		return x.TournamentHot
	}
	return false
}

func (x *MatchBasicInfo) GetTournamentWeight() int32 {
	if x != nil {
		return x.TournamentWeight
	}
	return 0
}

// 比赛实时信息
type MatchLiveInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clock         int32                  `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`                                      //走表时间，以秒为单位
	RollClock     bool                   `protobuf:"varint,2,opt,name=roll_clock,json=rollClock,proto3" json:"roll_clock,omitempty"`             //是否走表
	Period        string                 `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`                                     //阶段
	Score         string                 `protobuf:"bytes,4,opt,name=score,proto3" json:"score,omitempty"`                                       //比分
	LiveVideo     bool                   `protobuf:"varint,5,opt,name=live_video,json=liveVideo,proto3" json:"live_video,omitempty"`             //该比赛是否有视频或者直播
	ViewerCount   int32                  `protobuf:"varint,6,opt,name=viewer_count,json=viewerCount,proto3" json:"viewer_count,omitempty"`       //观看数量
	ClockModified int64                  `protobuf:"varint,7,opt,name=clock_modified,json=clockModified,proto3" json:"clock_modified,omitempty"` //走表修改时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchLiveInfo) Reset() {
	*x = MatchLiveInfo{}
	mi := &file_proto_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchLiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchLiveInfo) ProtoMessage() {}

func (x *MatchLiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchLiveInfo.ProtoReflect.Descriptor instead.
func (*MatchLiveInfo) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{2}
}

func (x *MatchLiveInfo) GetClock() int32 {
	if x != nil {
		return x.Clock
	}
	return 0
}

func (x *MatchLiveInfo) GetRollClock() bool {
	if x != nil {
		return x.RollClock
	}
	return false
}

func (x *MatchLiveInfo) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *MatchLiveInfo) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *MatchLiveInfo) GetLiveVideo() bool {
	if x != nil {
		return x.LiveVideo
	}
	return false
}

func (x *MatchLiveInfo) GetViewerCount() int32 {
	if x != nil {
		return x.ViewerCount
	}
	return 0
}

func (x *MatchLiveInfo) GetClockModified() int64 {
	if x != nil {
		return x.ClockModified
	}
	return 0
}

// 盘口
type Market struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketId      int64                  `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`      //盘口id
	MarketName    string                 `protobuf:"bytes,2,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"` //盘口名称
	MarketDetail  []*MarketDetail        `protobuf:"bytes,3,rep,name=market_detail,json=marketDetail,proto3" json:"market_detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Market) Reset() {
	*x = Market{}
	mi := &file_proto_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{3}
}

func (x *Market) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *Market) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *Market) GetMarketDetail() []*MarketDetail {
	if x != nil {
		return x.MarketDetail
	}
	return nil
}

// 盘口详情
type MarketDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Specifier     string                 `protobuf:"bytes,1,opt,name=specifier,proto3" json:"specifier,omitempty"` //盘口说明符，可能为空
	Selection     []*Selection           `protobuf:"bytes,2,rep,name=selection,proto3" json:"selection,omitempty"` //选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDetail) Reset() {
	*x = MarketDetail{}
	mi := &file_proto_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDetail) ProtoMessage() {}

func (x *MarketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDetail.ProtoReflect.Descriptor instead.
func (*MarketDetail) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{4}
}

func (x *MarketDetail) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *MarketDetail) GetSelection() []*Selection {
	if x != nil {
		return x.Selection
	}
	return nil
}

// 盘口选项
type Selection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectionId   int64                  `protobuf:"varint,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"` //投注项id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                   //选项名称
	ShortName     string                 `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`        //选项简称
	Odds          string                 `protobuf:"bytes,4,opt,name=odds,proto3" json:"odds,omitempty"`                                   //赔率
	Active        bool                   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`                              //true - 可以投注  false - 不可投注
	Parlay        bool                   `protobuf:"varint,6,opt,name=parlay,proto3" json:"parlay,omitempty"`                              //true - 支持串关  false - 不支持串关
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Selection) Reset() {
	*x = Selection{}
	mi := &file_proto_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{5}
}

func (x *Selection) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *Selection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Selection) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Selection) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *Selection) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Selection) GetParlay() bool {
	if x != nil {
		return x.Parlay
	}
	return false
}

// 下注项
type BetOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`             //required 比赛id
	SelectionId   int64                  `protobuf:"varint,2,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"` //required 选项id
	Odds          string                 `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`                                   //required 赔率
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetOption) Reset() {
	*x = BetOption{}
	mi := &file_proto_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetOption) ProtoMessage() {}

func (x *BetOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetOption.ProtoReflect.Descriptor instead.
func (*BetOption) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{6}
}

func (x *BetOption) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *BetOption) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *BetOption) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

// 下注串关方式
type BetCombo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialValue   int32                  `protobuf:"varint,1,opt,name=serial_value,json=serialValue,proto3" json:"serial_value,omitempty"` //required 串关选项个数, 如：投注4场比赛的3串1，此字段为3，如果是全串关（4串11*11)，此字段为0
	BetAmount     string                 `protobuf:"bytes,2,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`        //required 每个子单投注金额， 如 4选个的3串1*4，四个子单，每子单投注"10"元，总共投注40元，此字段为10
	OddsChange    int32                  `protobuf:"varint,3,opt,name=odds_change,json=oddsChange,proto3" json:"odds_change,omitempty"`    //required 接受赔率变化类型,0:不接受赔率变动 1:接受最优赔率变动 2:接受任意赔率变动
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BetCombo) Reset() {
	*x = BetCombo{}
	mi := &file_proto_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BetCombo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetCombo) ProtoMessage() {}

func (x *BetCombo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetCombo.ProtoReflect.Descriptor instead.
func (*BetCombo) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{7}
}

func (x *BetCombo) GetSerialValue() int32 {
	if x != nil {
		return x.SerialValue
	}
	return 0
}

func (x *BetCombo) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *BetCombo) GetOddsChange() int32 {
	if x != nil {
		return x.OddsChange
	}
	return 0
}

type PlaceBetInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrderId        string                 `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	SerialValue    int32                  `protobuf:"varint,2,opt,name=serial_value,json=serialValue,proto3" json:"serial_value,omitempty"`           // 串关选项个数, 如：投注4场比赛的3串1，此字段为3，如果是全串关（4串11*11)，此字段为0
	OrderStatus    int32                  `protobuf:"varint,3,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`           // 订单状态 0创建成功，1确认中，2拒单，3取消订单，4接单成功，5已结算
	OrderStatusMsg string                 `protobuf:"bytes,5,opt,name=order_status_msg,json=orderStatusMsg,proto3" json:"order_status_msg,omitempty"` // 订单状态msg
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlaceBetInfo) Reset() {
	*x = PlaceBetInfo{}
	mi := &file_proto_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaceBetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceBetInfo) ProtoMessage() {}

func (x *PlaceBetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceBetInfo.ProtoReflect.Descriptor instead.
func (*PlaceBetInfo) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{8}
}

func (x *PlaceBetInfo) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *PlaceBetInfo) GetSerialValue() int32 {
	if x != nil {
		return x.SerialValue
	}
	return 0
}

func (x *PlaceBetInfo) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *PlaceBetInfo) GetOrderStatusMsg() string {
	if x != nil {
		return x.OrderStatusMsg
	}
	return ""
}

// 限额选项
type RiskSelection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`             //比赛id
	SelectionId   int64                  `protobuf:"varint,2,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"` //选项id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskSelection) Reset() {
	*x = RiskSelection{}
	mi := &file_proto_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSelection) ProtoMessage() {}

func (x *RiskSelection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSelection.ProtoReflect.Descriptor instead.
func (*RiskSelection) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{9}
}

func (x *RiskSelection) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *RiskSelection) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

// 单关投注限额
type RiskSingleBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       int64                  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`             //比赛id
	SelectionId   int64                  `protobuf:"varint,2,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"` //选项id
	Min           int64                  `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`                                    //最小限额
	Max           int64                  `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`                                    //最大限额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskSingleBet) Reset() {
	*x = RiskSingleBet{}
	mi := &file_proto_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskSingleBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskSingleBet) ProtoMessage() {}

func (x *RiskSingleBet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskSingleBet.ProtoReflect.Descriptor instead.
func (*RiskSingleBet) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{10}
}

func (x *RiskSingleBet) GetMatchId() int64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *RiskSingleBet) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *RiskSingleBet) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RiskSingleBet) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// 串关投注限额
type RiskComboBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SerialValue   int32                  `protobuf:"varint,2,opt,name=serial_value,json=serialValue,proto3" json:"serial_value,omitempty"` //串关选项个数, 如：投注4场比赛的3串1，此字段为3，如果是全串关（4串11*11），此字段为0
	Min           int64                  `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`                                    //最小限额
	Max           int64                  `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`                                    //最大限额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RiskComboBet) Reset() {
	*x = RiskComboBet{}
	mi := &file_proto_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RiskComboBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiskComboBet) ProtoMessage() {}

func (x *RiskComboBet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiskComboBet.ProtoReflect.Descriptor instead.
func (*RiskComboBet) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{11}
}

func (x *RiskComboBet) GetSerialValue() int32 {
	if x != nil {
		return x.SerialValue
	}
	return 0
}

func (x *RiskComboBet) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *RiskComboBet) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// 注单记录
type Order struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BetId             string                 `protobuf:"bytes,1,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                                        //下注id
	BetTime           int64                  `protobuf:"varint,2,opt,name=bet_time,json=betTime,proto3" json:"bet_time,omitempty"`                                 //下注时间
	SettleTime        int64                  `protobuf:"varint,3,opt,name=settle_time,json=settleTime,proto3" json:"settle_time,omitempty"`                        //结算时间
	BetAmount         string                 `protobuf:"bytes,4,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`                            //下注总金额
	ReturnAmount      string                 `protobuf:"bytes,5,opt,name=return_amount,json=returnAmount,proto3" json:"return_amount,omitempty"`                   //返还金额
	Selections        []*OrderSelection      `protobuf:"bytes,6,rep,name=selections,proto3" json:"selections,omitempty"`                                           //选项
	ComboType         int32                  `protobuf:"varint,7,opt,name=combo_type,json=comboType,proto3" json:"combo_type,omitempty"`                           //串关类型，0-单关  1-串关  2-全串关(4串11)  3-全串关和单关(4串15)
	ParlayName        string                 `protobuf:"bytes,8,opt,name=parlay_name,json=parlayName,proto3" json:"parlay_name,omitempty"`                         //串关名称
	Odds              string                 `protobuf:"bytes,9,opt,name=odds,proto3" json:"odds,omitempty"`                                                       //赔率
	Status            int32                  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`                                                 //订单状态 1投注确认中，2拒单，3取消订单，4接单成功，5已结算
	EarlySupport      bool                   `protobuf:"varint,11,opt,name=early_support,json=earlySupport,proto3" json:"early_support,omitempty"`                 //是否支持提前结算
	EarlyBetAmount    string                 `protobuf:"bytes,12,opt,name=early_bet_amount,json=earlyBetAmount,proto3" json:"early_bet_amount,omitempty"`          //部分提前结算总本金
	EarlyReturnAmount string                 `protobuf:"bytes,13,opt,name=early_return_amount,json=earlyReturnAmount,proto3" json:"early_return_amount,omitempty"` //部分提前结算赢得总金额
	EarlySettleTimes  int32                  `protobuf:"varint,14,opt,name=early_settle_times,json=earlySettleTimes,proto3" json:"early_settle_times,omitempty"`   //已经提前结算的次数
	ResultStatus      int32                  `protobuf:"varint,15,opt,name=result_status,json=resultStatus,proto3" json:"result_status,omitempty"`                 //订单结果, 0-未结算 1-赢 2-和局 3-输 4-输一半 5-赢一半 6-退款 7-提前结算
	EarlySettlePrice  *EarlySettlePrice      `protobuf:"bytes,16,opt,name=early_settle_price,json=earlySettlePrice,proto3" json:"early_settle_price,omitempty"`    //提前结算报价
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_proto_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{12}
}

func (x *Order) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *Order) GetBetTime() int64 {
	if x != nil {
		return x.BetTime
	}
	return 0
}

func (x *Order) GetSettleTime() int64 {
	if x != nil {
		return x.SettleTime
	}
	return 0
}

func (x *Order) GetBetAmount() string {
	if x != nil {
		return x.BetAmount
	}
	return ""
}

func (x *Order) GetReturnAmount() string {
	if x != nil {
		return x.ReturnAmount
	}
	return ""
}

func (x *Order) GetSelections() []*OrderSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *Order) GetComboType() int32 {
	if x != nil {
		return x.ComboType
	}
	return 0
}

func (x *Order) GetParlayName() string {
	if x != nil {
		return x.ParlayName
	}
	return ""
}

func (x *Order) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *Order) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Order) GetEarlySupport() bool {
	if x != nil {
		return x.EarlySupport
	}
	return false
}

func (x *Order) GetEarlyBetAmount() string {
	if x != nil {
		return x.EarlyBetAmount
	}
	return ""
}

func (x *Order) GetEarlyReturnAmount() string {
	if x != nil {
		return x.EarlyReturnAmount
	}
	return ""
}

func (x *Order) GetEarlySettleTimes() int32 {
	if x != nil {
		return x.EarlySettleTimes
	}
	return 0
}

func (x *Order) GetResultStatus() int32 {
	if x != nil {
		return x.ResultStatus
	}
	return 0
}

func (x *Order) GetEarlySettlePrice() *EarlySettlePrice {
	if x != nil {
		return x.EarlySettlePrice
	}
	return nil
}

// 注单投注项
type OrderSelection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectionId   int64                  `protobuf:"varint,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"`      //投注项id
	SelectionName string                 `protobuf:"bytes,2,opt,name=selection_name,json=selectionName,proto3" json:"selection_name,omitempty"` //选项名称
	Odds          string                 `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`                                        //下注赔率
	MarketName    string                 `protobuf:"bytes,4,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`          //盘口名称
	MarketId      int64                  `protobuf:"varint,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`               //盘口id
	Specifier     string                 `protobuf:"bytes,6,opt,name=specifier,proto3" json:"specifier,omitempty"`                              //盘口说明符
	BetScore      string                 `protobuf:"bytes,7,opt,name=bet_score,json=betScore,proto3" json:"bet_score,omitempty"`                //下注时比分
	MatchBasic    *MatchBasicInfo        `protobuf:"bytes,8,opt,name=match_basic,json=matchBasic,proto3" json:"match_basic,omitempty"`          //比赛基本信息
	Status        int32                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                   //选项状态 0-未结算 1-赢 2-平 3-输 4-赢半 5-输半 6-取消
	EndScore      string                 `protobuf:"bytes,10,opt,name=end_score,json=endScore,proto3" json:"end_score,omitempty"`               //结束时比分
	InPlay        bool                   `protobuf:"varint,11,opt,name=in_play,json=inPlay,proto3" json:"in_play,omitempty"`                    //是否滚球
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderSelection) Reset() {
	*x = OrderSelection{}
	mi := &file_proto_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSelection) ProtoMessage() {}

func (x *OrderSelection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSelection.ProtoReflect.Descriptor instead.
func (*OrderSelection) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{13}
}

func (x *OrderSelection) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *OrderSelection) GetSelectionName() string {
	if x != nil {
		return x.SelectionName
	}
	return ""
}

func (x *OrderSelection) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *OrderSelection) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *OrderSelection) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *OrderSelection) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *OrderSelection) GetBetScore() string {
	if x != nil {
		return x.BetScore
	}
	return ""
}

func (x *OrderSelection) GetMatchBasic() *MatchBasicInfo {
	if x != nil {
		return x.MatchBasic
	}
	return nil
}

func (x *OrderSelection) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderSelection) GetEndScore() string {
	if x != nil {
		return x.EndScore
	}
	return ""
}

func (x *OrderSelection) GetInPlay() bool {
	if x != nil {
		return x.InPlay
	}
	return false
}

// 预约注单记录
type ReserveOrder struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReserveId     string                 `protobuf:"bytes,1,opt,name=reserve_id,json=reserveId,proto3" json:"reserve_id,omitempty"`        //下注id
	ReserveTime   int64                  `protobuf:"varint,2,opt,name=reserve_time,json=reserveTime,proto3" json:"reserve_time,omitempty"` //预约时间
	BetAmount     int64                  `protobuf:"varint,3,opt,name=bet_amount,json=betAmount,proto3" json:"bet_amount,omitempty"`       //下注金额
	Selection     *ReserveOrderSelection `protobuf:"bytes,4,opt,name=selection,proto3" json:"selection,omitempty"`                         //选项
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                              //选项状态 0 - 预约中  1 - 预约成功  2 - 预约失败 3 - 取消
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveOrder) Reset() {
	*x = ReserveOrder{}
	mi := &file_proto_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveOrder) ProtoMessage() {}

func (x *ReserveOrder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveOrder.ProtoReflect.Descriptor instead.
func (*ReserveOrder) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{14}
}

func (x *ReserveOrder) GetReserveId() string {
	if x != nil {
		return x.ReserveId
	}
	return ""
}

func (x *ReserveOrder) GetReserveTime() int64 {
	if x != nil {
		return x.ReserveTime
	}
	return 0
}

func (x *ReserveOrder) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *ReserveOrder) GetSelection() *ReserveOrderSelection {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *ReserveOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 预约注单投注项
type ReserveOrderSelection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SelectionId   int64                  `protobuf:"varint,1,opt,name=selection_id,json=selectionId,proto3" json:"selection_id,omitempty"`      //投注项id
	SelectionName string                 `protobuf:"bytes,2,opt,name=selection_name,json=selectionName,proto3" json:"selection_name,omitempty"` //选项名称
	Odds          string                 `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`                                        //预约下注赔率
	MarketName    string                 `protobuf:"bytes,4,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`          //盘口名称
	MarketId      int64                  `protobuf:"varint,5,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`               //盘口id
	Specifier     string                 `protobuf:"bytes,6,opt,name=specifier,proto3" json:"specifier,omitempty"`                              //盘口说明符
	MatchBasic    *MatchBasicInfo        `protobuf:"bytes,8,opt,name=match_basic,json=matchBasic,proto3" json:"match_basic,omitempty"`          //比赛基本信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReserveOrderSelection) Reset() {
	*x = ReserveOrderSelection{}
	mi := &file_proto_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReserveOrderSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveOrderSelection) ProtoMessage() {}

func (x *ReserveOrderSelection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveOrderSelection.ProtoReflect.Descriptor instead.
func (*ReserveOrderSelection) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{15}
}

func (x *ReserveOrderSelection) GetSelectionId() int64 {
	if x != nil {
		return x.SelectionId
	}
	return 0
}

func (x *ReserveOrderSelection) GetSelectionName() string {
	if x != nil {
		return x.SelectionName
	}
	return ""
}

func (x *ReserveOrderSelection) GetOdds() string {
	if x != nil {
		return x.Odds
	}
	return ""
}

func (x *ReserveOrderSelection) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *ReserveOrderSelection) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *ReserveOrderSelection) GetSpecifier() string {
	if x != nil {
		return x.Specifier
	}
	return ""
}

func (x *ReserveOrderSelection) GetMatchBasic() *MatchBasicInfo {
	if x != nil {
		return x.MatchBasic
	}
	return nil
}

// 提前结算报价
type EarlySettlePrice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BetId         string                 `protobuf:"bytes,1,opt,name=bet_id,json=betId,proto3" json:"bet_id,omitempty"`                       //订单ID
	Price         string                 `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                                    // 提前结算1元的报价，如返回0.92，就是提前结算1元可获得0.92元，无价格或者为0表示不能进行提前结算
	SettleTotal   int32                  `protobuf:"varint,3,opt,name=settle_total,json=settleTotal,proto3" json:"settle_total,omitempty"`    //单笔订单最大有效提前结算次数
	SettleMin     string                 `protobuf:"bytes,4,opt,name=settle_min,json=settleMin,proto3" json:"settle_min,omitempty"`           //订单提前结算单次最小结算本金
	SettleStatus  int32                  `protobuf:"varint,5,opt,name=settle_status,json=settleStatus,proto3" json:"settle_status,omitempty"` //投注确认中，2拒单，3取消订单，4接单成功，5已结算,101 预约提前结算中,102 提前结算进行中
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EarlySettlePrice) Reset() {
	*x = EarlySettlePrice{}
	mi := &file_proto_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EarlySettlePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarlySettlePrice) ProtoMessage() {}

func (x *EarlySettlePrice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarlySettlePrice.ProtoReflect.Descriptor instead.
func (*EarlySettlePrice) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{16}
}

func (x *EarlySettlePrice) GetBetId() string {
	if x != nil {
		return x.BetId
	}
	return ""
}

func (x *EarlySettlePrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *EarlySettlePrice) GetSettleTotal() int32 {
	if x != nil {
		return x.SettleTotal
	}
	return 0
}

func (x *EarlySettlePrice) GetSettleMin() string {
	if x != nil {
		return x.SettleMin
	}
	return ""
}

func (x *EarlySettlePrice) GetSettleStatus() int32 {
	if x != nil {
		return x.SettleStatus
	}
	return 0
}

// 玩法概览
type PlayTypeStatistical struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PlayType         int32                  `protobuf:"varint,1,opt,name=play_type,json=playType,proto3" json:"play_type,omitempty"`                        //玩法类型, 0-全部 1-滚球 2-今日 3-早盘 4-冠军
	MatchCount       int32                  `protobuf:"varint,2,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`                  //比赛数量
	SportStatistical []*SportStatistical    `protobuf:"bytes,3,rep,name=sport_statistical,json=sportStatistical,proto3" json:"sport_statistical,omitempty"` //球类概览
	PlayName         string                 `protobuf:"bytes,4,opt,name=play_name,json=playName,proto3" json:"play_name,omitempty"`                         //玩法名称
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PlayTypeStatistical) Reset() {
	*x = PlayTypeStatistical{}
	mi := &file_proto_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayTypeStatistical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayTypeStatistical) ProtoMessage() {}

func (x *PlayTypeStatistical) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayTypeStatistical.ProtoReflect.Descriptor instead.
func (*PlayTypeStatistical) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{17}
}

func (x *PlayTypeStatistical) GetPlayType() int32 {
	if x != nil {
		return x.PlayType
	}
	return 0
}

func (x *PlayTypeStatistical) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *PlayTypeStatistical) GetSportStatistical() []*SportStatistical {
	if x != nil {
		return x.SportStatistical
	}
	return nil
}

func (x *PlayTypeStatistical) GetPlayName() string {
	if x != nil {
		return x.PlayName
	}
	return ""
}

// 球类概览
type SportStatistical struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SportId       int32                  `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`          //球类id
	SportName     string                 `protobuf:"bytes,2,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`     //球类名称
	MatchCount    int32                  `protobuf:"varint,3,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"` //比赛数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SportStatistical) Reset() {
	*x = SportStatistical{}
	mi := &file_proto_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SportStatistical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportStatistical) ProtoMessage() {}

func (x *SportStatistical) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportStatistical.ProtoReflect.Descriptor instead.
func (*SportStatistical) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{18}
}

func (x *SportStatistical) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SportStatistical) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

func (x *SportStatistical) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

// 球类
type Sport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SportId       int32                  `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`      //球类id
	SportName     string                 `protobuf:"bytes,2,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"` //球类名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sport) Reset() {
	*x = Sport{}
	mi := &file_proto_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sport) ProtoMessage() {}

func (x *Sport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sport.ProtoReflect.Descriptor instead.
func (*Sport) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{19}
}

func (x *Sport) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *Sport) GetSportName() string {
	if x != nil {
		return x.SportName
	}
	return ""
}

// 联赛信息
type Tournament struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  //联赛id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               //联赛名称
	SimpleName    string                 `protobuf:"bytes,3,opt,name=simple_name,json=simpleName,proto3" json:"simple_name,omitempty"` //缩写
	Icon          string                 `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                               //联赛icon url
	SportId       int32                  `protobuf:"varint,5,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`         //球类id
	Hot           bool                   `protobuf:"varint,6,opt,name=hot,proto3" json:"hot,omitempty"`                                //是否热门
	Weight        int32                  `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`                          //权重
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	mi := &file_proto_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{20}
}

func (x *Tournament) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament) GetSimpleName() string {
	if x != nil {
		return x.SimpleName
	}
	return ""
}

func (x *Tournament) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tournament) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *Tournament) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

func (x *Tournament) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// 系统设置
type Setting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OddType       int32                  `protobuf:"varint,1,opt,name=odd_type,json=oddType,proto3" json:"odd_type,omitempty"`                    //赔率类型, 0-欧盘 1-香港盘
	SystemGoal    *NotifyMatchType       `protobuf:"bytes,2,opt,name=system_goal,json=systemGoal,proto3" json:"system_goal,omitempty"`            //系统通知-进球
	SystemKickOff *NotifyMatchType       `protobuf:"bytes,3,opt,name=system_kick_off,json=systemKickOff,proto3" json:"system_kick_off,omitempty"` //系统通知-开球
	AppGoal       *NotifyMatchType       `protobuf:"bytes,4,opt,name=app_goal,json=appGoal,proto3" json:"app_goal,omitempty"`                     //app内通知-开球
	Background    int32                  `protobuf:"varint,5,opt,name=background,proto3" json:"background,omitempty"`                             //背景设置
	Lang          string                 `protobuf:"bytes,6,opt,name=lang,proto3" json:"lang,omitempty"`                                          //语言
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Setting) Reset() {
	*x = Setting{}
	mi := &file_proto_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{21}
}

func (x *Setting) GetOddType() int32 {
	if x != nil {
		return x.OddType
	}
	return 0
}

func (x *Setting) GetSystemGoal() *NotifyMatchType {
	if x != nil {
		return x.SystemGoal
	}
	return nil
}

func (x *Setting) GetSystemKickOff() *NotifyMatchType {
	if x != nil {
		return x.SystemKickOff
	}
	return nil
}

func (x *Setting) GetAppGoal() *NotifyMatchType {
	if x != nil {
		return x.AppGoal
	}
	return nil
}

func (x *Setting) GetBackground() int32 {
	if x != nil {
		return x.Background
	}
	return 0
}

func (x *Setting) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// 需要发送系统通知的比赛类型
type NotifyMatchType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BetMatch      bool                   `protobuf:"varint,1,opt,name=bet_match,json=betMatch,proto3" json:"bet_match,omitempty"`             //已投注的比赛通知
	CollectMatch  bool                   `protobuf:"varint,2,opt,name=collect_match,json=collectMatch,proto3" json:"collect_match,omitempty"` //已收藏的比赛通知
	AllMatch      bool                   `protobuf:"varint,3,opt,name=all_match,json=allMatch,proto3" json:"all_match,omitempty"`             //所有的比赛通知
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyMatchType) Reset() {
	*x = NotifyMatchType{}
	mi := &file_proto_common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyMatchType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyMatchType) ProtoMessage() {}

func (x *NotifyMatchType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyMatchType.ProtoReflect.Descriptor instead.
func (*NotifyMatchType) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{22}
}

func (x *NotifyMatchType) GetBetMatch() bool {
	if x != nil {
		return x.BetMatch
	}
	return false
}

func (x *NotifyMatchType) GetCollectMatch() bool {
	if x != nil {
		return x.CollectMatch
	}
	return false
}

func (x *NotifyMatchType) GetAllMatch() bool {
	if x != nil {
		return x.AllMatch
	}
	return false
}

// 盘口分类
type MarketType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`             // code
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`             // name
	MarketBase    []*MarketBase          `protobuf:"bytes,3,rep,name=marketBase,proto3" json:"marketBase,omitempty"` //market基础信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketType) Reset() {
	*x = MarketType{}
	mi := &file_proto_common_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketType) ProtoMessage() {}

func (x *MarketType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketType.ProtoReflect.Descriptor instead.
func (*MarketType) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{23}
}

func (x *MarketType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *MarketType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketType) GetMarketBase() []*MarketBase {
	if x != nil {
		return x.MarketBase
	}
	return nil
}

type MarketBase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketId      int64                  `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`      //盘口id
	MarketName    string                 `protobuf:"bytes,2,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"` //盘口名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketBase) Reset() {
	*x = MarketBase{}
	mi := &file_proto_common_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketBase) ProtoMessage() {}

func (x *MarketBase) ProtoReflect() protoreflect.Message {
	mi := &file_proto_common_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketBase.ProtoReflect.Descriptor instead.
func (*MarketBase) Descriptor() ([]byte, []int) {
	return file_proto_common_proto_rawDescGZIP(), []int{24}
}

func (x *MarketBase) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *MarketBase) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

var File_proto_common_proto protoreflect.FileDescriptor

var file_proto_common_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x22, 0xe0, 0x05, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x20, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x61, 0x79,
	0x54, 0x65, 0x61, 0x6d, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x4c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68,
	0x6f, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c,
	0x69, 0x76, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x22, 0x6a, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x22, 0x5d, 0x0a, 0x09, 0x42, 0x65, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x08, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x62, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x42,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x22, 0x4d, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x71, 0x0a, 0x0d, 0x52, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x22, 0x55, 0x0a, 0x0c, 0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xf6, 0x04, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x42, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53,
	0x0a, 0x12, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6c,
	0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x10, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6f, 0x64, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x6c, 0x61,
	0x79, 0x22, 0xd1, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x64, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x73, 0x69, 0x63, 0x22,
	0xa6, 0x01, 0x0a, 0x10, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x61, 0x6c, 0x61,
	0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x10, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x6d, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41,
	0x0a, 0x05, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xae,
	0x02, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x64,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x64,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6c,
	0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x70,
	0x70, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x61, 0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x70, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x75, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61,
	0x6c, 0x61, 0x78, 0x79, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x70, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_common_proto_rawDescOnce sync.Once
	file_proto_common_proto_rawDescData []byte
)

func file_proto_common_proto_rawDescGZIP() []byte {
	file_proto_common_proto_rawDescOnce.Do(func() {
		file_proto_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_common_proto_rawDesc), len(file_proto_common_proto_rawDesc)))
	})
	return file_proto_common_proto_rawDescData
}

var file_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_common_proto_goTypes = []any{
	(*Match)(nil),                 // 0: galaxy.common.proto.Match
	(*MatchBasicInfo)(nil),        // 1: galaxy.common.proto.MatchBasicInfo
	(*MatchLiveInfo)(nil),         // 2: galaxy.common.proto.MatchLiveInfo
	(*Market)(nil),                // 3: galaxy.common.proto.Market
	(*MarketDetail)(nil),          // 4: galaxy.common.proto.MarketDetail
	(*Selection)(nil),             // 5: galaxy.common.proto.Selection
	(*BetOption)(nil),             // 6: galaxy.common.proto.BetOption
	(*BetCombo)(nil),              // 7: galaxy.common.proto.BetCombo
	(*PlaceBetInfo)(nil),          // 8: galaxy.common.proto.PlaceBetInfo
	(*RiskSelection)(nil),         // 9: galaxy.common.proto.RiskSelection
	(*RiskSingleBet)(nil),         // 10: galaxy.common.proto.RiskSingleBet
	(*RiskComboBet)(nil),          // 11: galaxy.common.proto.RiskComboBet
	(*Order)(nil),                 // 12: galaxy.common.proto.Order
	(*OrderSelection)(nil),        // 13: galaxy.common.proto.OrderSelection
	(*ReserveOrder)(nil),          // 14: galaxy.common.proto.ReserveOrder
	(*ReserveOrderSelection)(nil), // 15: galaxy.common.proto.ReserveOrderSelection
	(*EarlySettlePrice)(nil),      // 16: galaxy.common.proto.EarlySettlePrice
	(*PlayTypeStatistical)(nil),   // 17: galaxy.common.proto.PlayTypeStatistical
	(*SportStatistical)(nil),      // 18: galaxy.common.proto.SportStatistical
	(*Sport)(nil),                 // 19: galaxy.common.proto.Sport
	(*Tournament)(nil),            // 20: galaxy.common.proto.Tournament
	(*Setting)(nil),               // 21: galaxy.common.proto.Setting
	(*NotifyMatchType)(nil),       // 22: galaxy.common.proto.NotifyMatchType
	(*MarketType)(nil),            // 23: galaxy.common.proto.MarketType
	(*MarketBase)(nil),            // 24: galaxy.common.proto.MarketBase
}
var file_proto_common_proto_depIdxs = []int32{
	1,  // 0: galaxy.common.proto.Match.basic_info:type_name -> galaxy.common.proto.MatchBasicInfo
	3,  // 1: galaxy.common.proto.Match.market:type_name -> galaxy.common.proto.Market
	2,  // 2: galaxy.common.proto.MatchBasicInfo.live_info:type_name -> galaxy.common.proto.MatchLiveInfo
	4,  // 3: galaxy.common.proto.Market.market_detail:type_name -> galaxy.common.proto.MarketDetail
	5,  // 4: galaxy.common.proto.MarketDetail.selection:type_name -> galaxy.common.proto.Selection
	13, // 5: galaxy.common.proto.Order.selections:type_name -> galaxy.common.proto.OrderSelection
	16, // 6: galaxy.common.proto.Order.early_settle_price:type_name -> galaxy.common.proto.EarlySettlePrice
	1,  // 7: galaxy.common.proto.OrderSelection.match_basic:type_name -> galaxy.common.proto.MatchBasicInfo
	15, // 8: galaxy.common.proto.ReserveOrder.selection:type_name -> galaxy.common.proto.ReserveOrderSelection
	1,  // 9: galaxy.common.proto.ReserveOrderSelection.match_basic:type_name -> galaxy.common.proto.MatchBasicInfo
	18, // 10: galaxy.common.proto.PlayTypeStatistical.sport_statistical:type_name -> galaxy.common.proto.SportStatistical
	22, // 11: galaxy.common.proto.Setting.system_goal:type_name -> galaxy.common.proto.NotifyMatchType
	22, // 12: galaxy.common.proto.Setting.system_kick_off:type_name -> galaxy.common.proto.NotifyMatchType
	22, // 13: galaxy.common.proto.Setting.app_goal:type_name -> galaxy.common.proto.NotifyMatchType
	24, // 14: galaxy.common.proto.MarketType.marketBase:type_name -> galaxy.common.proto.MarketBase
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_common_proto_init() }
func file_proto_common_proto_init() {
	if File_proto_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_common_proto_rawDesc), len(file_proto_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_common_proto_goTypes,
		DependencyIndexes: file_proto_common_proto_depIdxs,
		MessageInfos:      file_proto_common_proto_msgTypes,
	}.Build()
	File_proto_common_proto = out.File
	file_proto_common_proto_goTypes = nil
	file_proto_common_proto_depIdxs = nil
}
